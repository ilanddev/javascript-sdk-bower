// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../../axios
//   ../../../rxjs

import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable } from 'rxjs';

export abstract class Iland {
    static init(_authProvider: AuthProvider, _config?: IlandSdkConfig): void;
    static getAuthProvider(): AuthProvider;
    static getHttp(): Http;
}
export interface IlandSdkConfig {
    baseUrl: string;
}

/**
    * Iland API HTTP Client.
    */
export class Http {
        /**
            * Constructs a new Http instance.
            * @param {string} baseUrl the base URL of the iland Cloud API
            */
        constructor(baseUrl: string);
        /**
            * Gets a formatted Accept header from a standard MIME and optional version number.
            * @param {string} mime the standard MIME string
            * @param {number} version the targeted version (defaults to the SDK version)
            * @returns {string} the formatted MIME type
            */
        static versionMime(mime: string, version?: number): string;
        /**
            * Performs a request against the iland Cloud API.
            * @param {AxiosRequestConfig} config request configuration
            * @returns {Promise<AxiosResponse>} promise that resolves with the server response
            * @throws {ApiError} if the server responds with an error
            */
        request(config: AxiosRequestConfig): Promise<AxiosResponse>;
        /**
            * Perform a GET request against the iland Cloud API.
            * @param {string} url the URL path
            * @param {AxiosRequestConfig} config request configuration
            * @returns {Promise<AxiosResponse>} promise that resolves with server response
            * @throws {ApiError} if the server responds with an error
            */
        get(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse>;
        /**
            * Perform a DELETE request against the iland Cloud API.
            * @param {string} url the URL path
            * @param {AxiosRequestConfig} config request configuration
            * @returns {Promise<AxiosResponse>} promise that resolves with the server response
            * @throws {ApiError} if the server responds with an error
            */
        delete(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse>;
        /**
            * Perform a POST request against the iland Cloud API.
            * @param {string} url the URL path
            * @param data the data to include in the request body
            * @param {AxiosRequestConfig} config request configuration
            * @returns {Promise<AxiosResponse>} promise that resolves with the server response
            * @throws {ApiError} if the server responds with an error
            */
        post(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse>;
        /**
            * Perform a PUT request against the iland Cloud API.
            * @param {string} url the URL path
            * @param data the data to include in the request body
            * @param {AxiosRequestConfig} config request configuration
            * @returns {Promise<AxiosResponse>} promise that resolves with the server response
            * @throws {ApiError} if the server responds with an error
            */
        put(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse>;
}

/**
    * Entity.
    */
export abstract class Entity {
        constructor(_apiEntity: EntityJson);
        /**
            * Gets the name.
            * @returns {string} name
            */
        readonly name: string;
        /**
            * Gets the UUID.
            * @returns {string} UUID
            */
        readonly uuid: string;
        /**
            * Indicates whether the entity is deleted.
            * @returns {boolean} value
            */
        readonly deleted: boolean;
        /**
            * Gets the last date that the entity was updated.
            * @returns {Date} last updated date
            */
        readonly updatedDate: Date;
        /**
            * Gets the date that the entity was deleted, or null if it is not deleted.
            * @returns {Date} deleted date or null if not applicable
            */
        readonly deletedDate: Date | null;
        /**
            * Gets the type of the entity.
            * @returns {EntityType} the type of the entity
            */
        readonly abstract entityType: EntityType;
}

/**
    * Task.
    */
export class Task {
        constructor(_apiTask: TaskJson);
        /**
            * Gets a Task by datacenter and UUID.
            * @param locationId the datacenter identifier
            * @param taskUuid the task uuid
            * @returns {Promise<Task>} promise that resolves with the Task
            */
        static getTask(locationId: string, taskUuid: string): Promise<Task>;
        /**
            * Gets the UUID of the task.
            * @returns {string} UUID
            */
        readonly uuid: string;
        /**
            * Gets the datacenter location ID of the task.
            * @returns {string} datacenter location ID
            */
        readonly locationId: string;
        /**
            * Indicates whether the task is complete.
            * @returns {boolean} value
            */
        readonly complete: boolean;
        /**
            * Indicates the status of the task.
            * @returns {TaskStatus} task status
            */
        readonly status: TaskStatus;
        /**
            * Gets the task's operation identifier.
            */
        readonly operation: TaskOperation;
        /**
            * Gets the end time of the task.
            * @returns {Date|null} end time of the task or null if the task hasn't yet completed
            */
        readonly endTime: Date | null;
        /**
            * Gets the UUID of the entity that is associated with the task.
            * @returns {string} the UUID of the associated entity
            */
        readonly entityUuid: string;
        /**
            * Indicates whether the task was initiated from the iland API.
            * @returns {boolean} value
            */
        readonly initiatedFromIlandApi: boolean;
        /**
            * Gets the date/time that the task was received/queued by the API.
            * @returns {Date} the date that the task was initiated
            */
        readonly initiationTime: Date;
        /**
            * Gets the message associated with the task, if there is one. The message may provide extra information if the task
            * ended with an error status.
            * @returns {string|null} message string or null if no message is associated with the task
            */
        readonly message: string | null;
        /**
            * Returns an operation description that may provide more detail about the operation that the task is associated with.
            * @returns {string} description
            */
        readonly operationDescription: string;
        /**
            * Returns the UUID of the organization that the task is associated with.
            */
        readonly orgUuid: string;
        /**
            * Gets a map of additional task details that are specific to the task operation type.
            * @returns {Map<string, any>} map of other task attributes
            */
        readonly otherAttributes: Map<string, any>;
        /**
            * If this is a sub-task, returns the UUID of the parent task, otherwise null.
            * @returns {string|null} returns the UUID of the parent task
            */
        readonly parentTaskUuid: string | null;
        /**
            * Gets the task progress as a percentage.
            * @returns {number} in the range 0-100
            */
        readonly progress: number;
        /**
            * Gets the start time of the task, if the task has started. If the task is still queued, returns null.
            * @returns {Date|null} the start time of the task or null
            */
        readonly startTime: Date | null;
        /**
            * Gets the task's sub-tasks, if this is a composite task.
            * @returns {Array<string>}
            */
        readonly subTasks: Array<string>;
        /**
            * If this task is a wrapper for a task from another service (vCloud director, Zerto, etc), this will return the ID of
            * the task known to that service. Otherwise returns Uhe task UUID.
            * @returns {string} the ID of the task
            */
        readonly taskId: string;
        /**
            * Gets the task type.
            * @returns {TaskType} the type of the task
            */
        readonly taskType: TaskType;
        /**
            * Gets the username of the user that initiated the task.
            * @returns {string} username of the initiating user
            */
        readonly username: string;
        /**
            * Gets the full name of the user that initiated the task.
            * @returns {string} full name of the user that initiated the task
            */
        readonly userFullName: string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {TaskJson} the API Task object
            */
        readonly json: TaskJson;
        /**
            * Retrieves a new representation of the task from the API.
            * @returns {Promise<Task>} promise that resolves with updated task
            */
        refresh(): Promise<Task>;
        /**
            * Gets a promise that resolves or rejects when the task is complete. An error status will cause rejection.
            * @returns {Promise<Task>} completion promise
            */
        getPromise(): Promise<Task>;
        /**
            * Gets an observable that is updated as the progress or status of the task changes.
            * @returns {Observable<Task>} task observable
            */
        getObservable(): Observable<Task>;
}

/**
    * Virtual Machine.
    */
export class Vm extends Entity {
        constructor(_apiVm: VmJson);
        /**
            * Gets a VM by UUID.
            * @param uuid VM UUID
            * @returns {Promise<Vm>} promise that resolves with the VM
            */
        static getVm(uuid: string): Promise<Vm>;
        readonly entityType: EntityType;
        /**
            * Gets the VM's local ID.
            * @returns {string} the VM's local ID
            */
        readonly vmLocalId: string;
        /**
            * Gets the VM's datastore reference.
            * @returns {string} datastore reference
            */
        readonly vimDatastoreRef: string;
        /**
            * Gets the UUID of the vDC that the VM belongs to.
            * @returns {string} vDC UUID
            */
        readonly vdcUuid: string;
        /**
            * Gets the HREF of the vCloud Director instance that this VM is associated with.
            * @returns {string} vCloud HREF
            */
        readonly vcloudHref: string;
        /**
            * Gets the name of the vCenter server that the VM is associated with.
            * @returns {string} vCenter name
            */
        readonly vcenterName: string;
        /**
            * Gets the VM'r vCenter reference.
            * @returns {string} vCenter reference
            */
        readonly vcenterMoRef: string;
        /**
            * Gets the UUID of the vCenter instance that the VM is associated with.
            * @returns {string} vCenter UUID
            */
        readonly vcenterInstanceUuid: string;
        /**
            * Gets the HREF of the vCenter instance that the VM is associated with.
            * @returns {string} vCenter HREF
            */
        readonly vcenterHref: string;
        /**
            * Gets the UUID of the vApp that this VM belongs to.
            * @returns {string} vApp UUID
            */
        readonly vappUuid: string;
        /**
            * Gets the list of storage profiles that are available to this VM.
            * @returns {Array<string>} list of storage profile UUIDs
            */
        readonly storageProfiles: Array<string>;
        /**
            * Gets the power status of the VM.
            * @returns {VmPowerStatus} power status identifier
            */
        readonly powerStatus: VmPowerStatus;
        /**
            * Gets the VM's operating system.
            * @returns {OperatingSystem} operating system
            */
        readonly operatingSystem: OperatingSystem;
        /**
            * Gets the UUID of the Organization that the VM belongs to.
            * @returns {string} Org UUID
            */
        readonly orgUuid: string;
        /**
            * Gets the datacenter location identifier for the VM.
            * @returns {string} datacenter location ID
            */
        readonly locationId: string;
        /**
            * Gets the name of the media that is currently inserted in the VM.
            * @returns {string} the name of the inserted media or null if no media is currently inserted
            */
        readonly insertedMediaName: string | null;
        /**
            * Indicates whether there is currently a media inserted in the VM.
            * @returns {boolean} value
            */
        readonly mediaInserted: boolean;
        /**
            * Gets the VM's hardware version.
            * @returns {string} hardware version
            */
        readonly hardwareVersion: string;
        /**
            * Gets the VM's description.
            * @returns {string} description
            */
        readonly description: string;
        /**
            * Indicates whether the VM is deployed.
            * @returns {boolean} value
            */
        readonly deployed: boolean;
        /**
            * Gets the date that the VM was created.
            * @returns {Date} creation date
            */
        readonly createdDate: Date | null;
        /**
            * Gets the number of CPUs for the VM.
            * @returns {number} number of CPUs
            */
        readonly numberOfCpus: number;
        /**
            * Gets the number of cores per CPU socket.
            * @returns {number} cores per CPU socket
            */
        readonly coresPerSocket: number;
        /**
            * Gets the VM's configured memory in MB.
            * @returns {number} the VM's configured memory in MB.
            */
        readonly memorySize: number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VmJson} the API VM object
            */
        readonly json: VmJson;
        /**
            * Refreshes the VM data by retrieving it from the API again.
            * @returns {Promise<Vm>}
            */
        refresh(): Promise<Vm>;
        /**
            * Gets the list of VNICs for this VM.
            * @returns {Promise<Vnic[]>}
            */
        getVnics(): Promise<Array<Vnic>>;
        /**
            * Updates the VM's description.
            * @param description the new description
            * @returns {Promise<Task>} task promise
            */
        updateDescription(description: string): Promise<Task>;
        /**
            * Updates the VM's name.
            * @param newName the new name
            * @returns {Promise<Task>} task promise
            */
        updateName(newName: string): Promise<Task>;
        /**
            * Edit the memory size of the VM.
            * @param memorySizeMb {number} the new memory size in MB
            * @returns {Promise<Task>} task promise
            */
        updateMemorySize(memorySizeMb: number): Promise<Task>;
        /**
            * Edit the number of CPUs.
            * @param request {VmCpuUpdateRequest} specifying new number of CPUs
            * @returns {Promise<Task>} task promise
            */
        updateNumberOfCpus(request: VmCpuUpdateRequest): Promise<Task>;
        /**
            * Gets the VM's virtual disks.
            * @returns {Promise<VirtualDisk[]>} array of virtual disks
            */
        getVirtualDisks(): Promise<Array<VirtualDisk>>;
        /**
            * Update the VM's virtual disks.
            * @param {Array<VirtualDiskJson>} disksJson array of specs for new disks
            * @returns {Promise<Task>} task promise
            */
        updateVirtualDisks(disksJson: Array<VirtualDiskJson>): Promise<Task>;
        /**
            * Update a virtual disk that is attached to this VM.
            * @param {VirtualDiskJson} diskJson updated specification for the disk
            * @returns {Promise<Task>} task promise
            */
        updateVirtualDisk(diskJson: VirtualDiskJson): Promise<Task>;
        /**
            * Create a new virtual disk for this VM.
            * @param {VirtualDiskJson} diskJson spec for the new disk
            * @returns {Promise<Task>} task promise
            */
        createVirtualDisk(diskJson: VirtualDiskJson): Promise<Task>;
        /**
            * Delete a virtual disk.
            * @param {string} name the name of the disk to delete
            * @returns {Promise<Task>} task promise
            */
        deleteVirtualDisk(name: string): Promise<Task>;
        /**
            * Gets the VM's metadata.
            * @returns {Promise<Metadata<MetadataType>[]>}
            */
        getMetadata(): Promise<Array<Metadata<MetadataType>>>;
        /**
            * Updates the VM's metadata.
            * @param {Array<MetadataJson<MetadataType>>} metadataJson the new array of metadata
            * @returns {Promise<Task>} task promise
            */
        updateMetadata(metadataJson: Array<MetadataJson<MetadataType>>): Promise<Task>;
        /**
            * Deletes a metadata entry.
            * @param {string} metadataKey the key of the metadata entry to delete
            * @returns {Promise<Task>} task promise
            */
        deleteMetadata(metadataKey: string): Promise<Task>;
        /**
            * Deletes this VM.
            * @returns {Promise<Task>} task promise
            */
        delete(): Promise<Task>;
        /**
            * Performs a power operation on the VM.
            * @param {VmPowerOperation} type the type of power operation to perform
            * @param {boolean} forceGuestCustomization whether to force guest customization (only applicable when powering on)
            * @returns {Promise<Task>} task promise
            */
        performPowerOperation(type: VmPowerOperation, forceGuestCustomization?: boolean): Promise<Task>;
        /**
            * Powers on the VM.
            * @param {boolean} forceGuestCustomization whether to force guest customization
            * @returns {Promise<Task>} task promise
            */
        powerOn(forceGuestCustomization?: boolean): Promise<Task>;
        /**
            * Powers off the VM.
            * @returns {Promise<Task>} task promise
            */
        powerOff(): Promise<Task>;
        /**
            * Suspends VM.
            * @returns {Promise<Task>} task promise
            */
        suspend(): Promise<Task>;
        /**
            * Shuts down the VMs guest operating system.
            * @returns {Promise<Task>} task promise
            */
        shutdownGuestOs(): Promise<Task>;
        /**
            * Performs a hard reset power operation.
            * @returns {Promise<Task>} task promise
            */
        reset(): Promise<Task>;
        /**
            * Requests that the guest OS restart.
            * @returns {Promise<Task>} task promise
            */
        rebootGuestOs(): Promise<Task>;
        /**
            * Gets the VMs available backup restore points.
            * @returns {Promise<BackupRestorePoint[]>} promise that resolves with the list of backup restore points
            */
        getBackupRestorePoints(): Promise<Array<BackupRestorePoint>>;
        /**
            * Restores a backup of the VM.
            * @param {Date} timestamp the timestamp of the restore point to be restored
            * @returns {Promise<Task>} task promise
            */
        restoreBackup(timestamp: Date): Promise<Task>;
        /**
            * Gets the VMs snapshot details.
            * @returns {Promise<Snapshot>} promise that resolves with the current snapshot details
            * @throws {ApiError} as NotFoundError if the VM doesn't currently have a snapshot
            */
        getSnapshot(): Promise<Snapshot>;
        /**
            * Creates a snapshot of the VM.
            * @param {VmCreateSnapshotRequest} options the snapshot creation options
            * @returns {Promise<Task>} task promise
            */
        createSnapshot(options: VmCreateSnapshotRequest): Promise<Task>;
        /**
            * Restore the VMs snapshot.
            * @returns {Promise<Task>} task promise
            */
        restoreSnapshot(): Promise<Task>;
        /**
            * Deletes the VMs snapshot.
            * @returns {Promise<Task>} task promise
            */
        deleteSnapshot(): Promise<Task>;
        /**
            * Updates the VM's virtual hardware to the latest version available.
            * @returns {Promise<Task>} task promise
            */
        updateVirtualHardwareVersion(): Promise<Task>;
        /**
            * Gets the VMs screen ticket for a remote console connection.
            * @returns {Promise<ScreenTicket>} promise that resolves with the screen ticket
            */
        getScreenTicket(): Promise<ScreenTicket>;
        /**
            * Gets the VMs MKS screen ticket for a remote console connection.
            * @returns {Promise<MksScreenTicket>} promise that resolves with the MKS screen ticket
            */
        getMksScreenTicket(): Promise<MksScreenTicket>;
        /**
            * Gets the bill for the VM for the specified month and year. Month and year default to current month and year if left
            * unspecified.
            * @returns {Promise<Bill>} promise that resolves with the Bill
            */
        getBill(month?: number, year?: number): Promise<Bill>;
        /**
            * Gets the current billing summary for the VM.
            * @returns {Promise<BillingSummary>} promise that resolves with the current billing summary
            */
        getCurrentBillingSummary(): Promise<BillingSummary>;
        /**
            * Inserts a specified media into the VM.
            * @param {string} mediaUuid the UUID of the media to insert
            * @returns {Promise<Task>} task promise
            */
        insertMedia(mediaUuid: string): Promise<Task>;
        /**
            * Ejects any media from the VM.
            * @returns {Promise<Task>} task promise
            */
        ejectMedia(): Promise<Task>;
        /**
            * Move the VM to a different storage profile.
            * @returns {Promise<Task>} task promise
            */
        relocate(storageProfileUuid: string): Promise<Task>;
}
/**
    * Enumeration of possible VM power statuses.
    */
export type VmPowerStatus = VmStatus | 'PARTIALLY_POWERED_OFF';

/**
    * User.
    */
export class User {
        constructor(_apiUser: UserJson);
        /**
            * Gets a user by username.
            * @param username the user's username
            * @returns {Promise<User>}
            */
        static getUser(username: string): Promise<User>;
        /**
            * Gets the currently authenticated user.
            * @returns {Promise<User>}
            */
        static getCurrentUser(): Promise<User>;
        /**
            * Gets the user's username.
            * @returns {string} username
            */
        readonly username: string;
        /**
            * Gets the user's address.
            * @returns {string} address
            */
        readonly address: string;
        /**
            * Gets the user's city.
            * @returns {string} city
            */
        readonly city: string;
        /**
            * Gets the user's company.
            * @returns {string} company
            */
        readonly company: string;
        /**
            * Gets the user's country.
            * @returns {string} country
            */
        readonly country: string;
        /**
            * Gets the user's created date.
            * @returns {Date} created date
            */
        readonly createdDate: Date;
        /**
            * Gets the user's domain.
            * @returns {string} user domain
            */
        readonly domain: string;
        /**
            * Indicates whether the user is deleted.
            * @returns {boolean} value
            */
        readonly deleted: boolean;
        /**
            * Gets the deleted date of the user.
            * @returns {Date} deleted date or null if the user is not deleted
            */
        readonly deletedDate: Date | null;
        /**
            * Gets the user's email address.
            * @returns {string} email address
            */
        readonly email: string;
        /**
            * Gets the user's full name.
            * @returns {string} full name
            */
        readonly fullName: string;
        /**
            * Indicates whether the user is locked out of their account.
            * @returns {boolean} value
            */
        readonly locked: boolean;
        /**
            * Gets the phone number of the user.
            * @returns {string} phone number
            */
        readonly phoneNumber: string;
        /**
            * Gets the user's state.
            * @returns {string} state
            */
        readonly state: string;
        /**
            * Gets the user type.
            * @returns {UserType} user type
            */
        readonly userType: UserType;
        /**
            * Gets the user's zip code.
            * @returns {string} zip code.
            */
        readonly zip: string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {UserJson} the API User object
            */
        readonly json: UserJson;
        /**
            * Retrieves a new representation of the user from the API.
            * @returns {Promise<User>} promise that resolves with updated user
            */
        refresh(): Promise<User>;
        /**
            * Gets the user's inventory within the specified company..
            * @param {string} companyId the ID of the company to retrieve inventory for
            * @returns {Promise<CompanyInventory>}  entity inventory
            * @throws Error
            */
        getInventoryInCompany(companyId: string): Promise<CompanyInventory>;
        /**
            * Gets the user's entity inventory.
            * @returns {Promise<Array<CompanyInventory>>} user's entity inventory
            */
        getInventory(): Promise<Array<CompanyInventory>>;
        /**
            * Gets the user's role for a company
            * @param {string} companyUuid
            * @returns {Promise<Role>}
            */
        getRole(companyUuid: string): Promise<Role>;
        /**
            * Gets the user's list of companies.
            * @returns {Promise<Array<Company>>} user's list of companies
            */
        getCompanies(): Promise<Array<Company>>;
}

/**
    * Virtual Network Interface Card.
    */
export class Vnic {
        constructor(_apiVnic: VnicJson);
        /**
            * Gets the type of the adapter.
            * @returns {string} adapter type
            */
        readonly adapterType: string;
        /**
            * Gets the address mode of the adapter.
            * @returns {string} address mode
            */
        readonly addressMode: VnicAddressMode;
        /**
            * Indicates whether the VNIC is currently connected.
            * @returns {boolean} value
            */
        readonly connected: boolean;
        /**
            * Indicates whether the VNIC is deleted.
            * @returns {boolean} value
            */
        readonly deleted: boolean;
        /**
            * Gets the IP address that is assigned to the VNIC.
            * @returns {string} IP Address
            */
        readonly ipAddress: string;
        /**
            * Gets the MAC address that is assigned to the VNIC.
            * @returns {string} MAC address
            */
        readonly macAddress: string;
        /**
            * Gets the name of the network that the VNIC is connected to.
            * @returns {string} vApp network name
            */
        readonly connectedNetworkName: string;
        /**
            * Indicates whether this is the VM's primary VNIC.
            * @returns {boolean} value
            */
        readonly primaryConnection: boolean;
        /**
            * Gets the ID of the VNIC among other VNICs connected to the VM.
            * @returns {number} VNIC ID
            */
        readonly vnicId: number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VnicJson} the API VNIC object
            */
        readonly json: VnicJson;
}

/**
    * VM Backup Restore Point.
    */
export class BackupRestorePoint {
        constructor(_json: BackupRestorePointJson);
        /**
            * Gets the name of the restore point.
            * @returns {string} the name
            */
        readonly name: string;
        /**
            * Gets the timestamp of the backup restore point.
            * @returns {Date} date of the restore point
            */
        readonly timestamp: Date;
        /**
            * Gets the name of the backup server that the restore point is stored on.
            * @returns {string} the name of the backup server
            */
        readonly backupServerName: string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BackupRestorePointJson} the JSON representation
            */
        readonly json: BackupRestorePointJson;
}

/**
    * Bill Ticket.
    */
export class Bill {
        constructor(_json: BillJson);
        /**
            * Gets the UUID of the entity that the bill is associated with.
            * @returns {string} entity UUID
            */
        readonly entityUuid: string;
        /**
            * Gets the total cost.
            * @returns {number} total
            */
        readonly totalCost: number;
        /**
            * Gets the cost of CPU.
            * @returns {number} cpu cost
            */
        readonly cpuCost: number;
        /**
            * Gets the cost of bandwidth.
            * @returns {number} bandwidth cost
            */
        readonly bandwidthCost: number;
        /**
            * Gets the cost of memory.
            * @returns {number} memory cost
            */
        readonly memoryCost: number;
        /**
            * Gets an estimate of what the cost could be at the end of the billing period.
            * @returns {number} estimated cost
            */
        readonly estimatedCost: number;
        /**
            * Gets the CPU usage.
            * @returns {number} cpu usage
            */
        readonly cpuUsage: number;
        /**
            * Gets the CPU burst usage.
            * @returns {number} cpu burst usage
            */
        readonly cpuBurstUsage: number;
        /**
            * Gets the CPU reserved usage.
            * @returns {number} cpu reserved usage
            */
        readonly cpuReservedUsage: number;
        /**
            * Gets the memory usage.
            * @returns {number} memory usage
            */
        readonly memoryUsage: number;
        /**
            * Gets the reserved memory usage.
            * @returns {number} reserved memory usage
            */
        readonly memoryReservedUsage: number;
        /**
            * Gets the burst memory usage.
            * @returns {number} burst memory usage
            */
        readonly memoryBurstUsage: number;
        /**
            * Gets the bandwidth usage.
            * @returns {number} bandwidth usage
            */
        readonly bandwidthUsage: number;
        /**
            * Gets the burst CPU cost.
            * @returns {number} burst cpu cost
            */
        readonly cpuBurstCost: number;
        /**
            * Gets the burst memory cost.
            * @returns {number} burst memory cost
            */
        readonly memoryBurstCost: number;
        /**
            * Gets the burst bandwidth cost.
            * @returns {number} burst bandwidth cost
            */
        readonly bandwidthBurstCost: number;
        /**
            * Gets the currency code.
            * @returns {CurrencyCode} the currency code
            */
        readonly currencyCode: CurrencyCode;
        /**
            * Gets the timestamp of the bill.
            * @returns {Date} the bill timestamp
            */
        readonly timestamp: Date;
        /**
            * Indicates whether this is a test drive.
            * @returns {boolean} value
            */
        readonly testDrive: boolean;
        /**
            * Gets the line items.
            * @returns {Array<BillLineItem>} line items
            */
        readonly lineItems: Array<BillLineItem>;
        /**
            * Gets the discount factor.
            * @returns {number} discount
            */
        readonly discount: number;
        /**
            * Gets the disk usage for the billing period.
            * @returns {number} disk usage
            */
        readonly diskUsage: number;
        /**
            * Gets the disk cost for the billing period.
            * @returns {number} disk cost
            */
        readonly diskCost: number;
        /**
            * Gets the disk burst usage for the billing period.
            * @returns {number} disk burst usage
            */
        readonly diskBurstUsage: number;
        /**
            * Gets the disk burst cost for the billing period.
            * @returns {number} disk burst cost
            */
        readonly diskBurstCost: number;
        /**
            * Gets the hard drive storage usage for the billing period.
            * @returns {number} hard drive storage usage
            */
        readonly hddStorageUsage: number;
        /**
            * Gets the hard drive storage usage for the billing period.
            * @returns {number} hard drive storage usage
            */
        readonly hddStorageCost: number;
        /**
            * Gets the hard drive storage burst cost for the billing period.
            * @returns {number} hard drive storage burst cost.
            */
        readonly hddStorageBurstCost: number;
        /**
            * Gets the hard drive storage reserved cost for the billing period.
            * @returns {number} hard drive storage reserved cost.
            */
        readonly hddStorageReservedCost: number;
        /**
            * Gets the hard drive storage reserved usage.
            * @returns {number} hard drive storage reserved usage.
            */
        readonly hddStorageReservedUsage: number;
        /**
            * Gets the solid state storage reserved usage.
            * @returns {number} solid state storage reserved usage.
            */
        readonly ssdStorageReservedUsage: number;
        /**
            * Gets the solid state storage reserved cost.
            * @returns {number} solid state storage reserved cost.
            */
        readonly ssdStorageReservedCost: number;
        /**
            * Gets the solid state storage usage.
            * @returns {number} solid state storage usage.
            */
        readonly ssdStorageUsage: number;
        /**
            * Gets the solid state storage cost.
            * @returns {number} solid state storage cost
            */
        readonly ssdStorageCost: number;
        /**
            * Gets the solid state storage burst usage.
            * @returns {number} solid state storge burst usage
            */
        readonly ssdStorageBurstUsage: number;
        /**
            * Gets the solid state storage burst cost.
            * @returns {number} solid state storage burst cost
            */
        readonly ssdStorageBurstCost: number;
        /**
            * Gets the archive storage usage.
            * @returns {number} archive storage usage
            */
        readonly archiveStorageUsage: number;
        /**
            * Gets the archive storage cost.
            * @returns {number} archive storage cost
            */
        readonly archiveStorageCost: number;
        /**
            * Gets the archive storage burst usage.
            * @returns {number} archive storage burst usage
            */
        readonly archiveStorageBurstUsage: number;
        /**
            * Gets the archive storage burst cost.
            * @returns {number} archive storage burst cost
            */
        readonly archiveStorageBurstCost: number;
        /**
            * Gets the archive storage reserved cost.
            * @returns {number} archive storage reserved cost
            */
        readonly archiveStorageReservedCost: number;
        /**
            * Gets the archive storage reserved usage.
            * @returns {number} archive storage reserved usage
            */
        readonly archiveStorageReservedUsage: number;
        /**
            * Gets the zerto archive storage usage.
            * @returns {number} zerto archive storage usage
            */
        readonly zertoArchiveStorageUsage: number;
        /**
            * Gets the zerto archive storage cost.
            * @returns {number} zerto archive storage cost
            */
        readonly zertoArchiveStorageCost: number;
        /**
            * Gets the zerto advanced storage cost.
            * @returns {number} zerto advanced storage cost
            */
        readonly zertoAdvancedStorageCost: number;
        /**
            * Gets the zerto advanced storage usage.
            * @returns {number} zerto advanced storage usage
            */
        readonly zertoAdvancedStorageUsage: number;
        /**
            * Gets the entity type that the bill is associated with.
            * @returns {EntityType} entity type
            */
        readonly entityType: EntityType;
        /**
            * Gets the name of the entity that the bill is associated with.
            * @returns {string} entity name
            */
        readonly entityName: string;
        /**
            * Gets the bandwidth reserved usage.
            * @returns {number} bandwidth reserved usage
            */
        readonly bandwidthReservedUsage: number;
        /**
            * Gets the bandwidth reserved cost.
            * @returns {number} bandwidth reserved cost
            */
        readonly bandwidthReservedCost: number;
        /**
            * Gets the bandwidth burst usage.
            * @returns {number} bandwidth burst usage
            */
        readonly bandwidthBurstUsage: number;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BillJson} the JSON representation
            */
        readonly json: BillJson;
}

/**
    * Billing Summary.
    */
export class BillingSummary {
        constructor(_json: BillingSummaryJson);
        /**
            * Gets the current month bill.
            * @returns {Bill} the current month bill
            */
        readonly currentMonth: Bill;
        /**
            * Gets the previous month bill.
            * @returns {Bill} the previous month bill
            */
        readonly previousMonth: Bill;
        /**
            * Gets the current hour bill.
            * @returns {Bill} the current hour bill
            */
        readonly currentHour: Bill;
        /**
            * Gets the previous hour bill.
            * @returns {Bill} the previous hour bill
            */
        readonly previousHour: Bill;
        /**
            * Indicates whether this is a test drive bill.
            * @returns {boolean} value
            */
        readonly testDrive: boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BillingSummaryJson} the JSON representation
            */
        readonly json: BillingSummaryJson;
}

/**
    * Bill Line Item.
    */
export class BillLineItem {
        constructor(_json: BillLineItemJson);
        /**
            * Gets the line item name.
            * @returns {string} name
            */
        readonly name: string;
        /**
            * Gets the price.
            * @returns {number} price
            */
        readonly price: number;
        /**
            * Gets the quantity.
            * @returns {number} quantity
            */
        readonly quantity: number;
        /**
            * Gets the product ID.
            * @returns {string} the product ID
            */
        readonly productId: string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {BillLineItemJson} the JSON representation
            */
        readonly json: BillLineItemJson;
}

/**
    * Edge Gateway.
    */
export class Edge extends Entity {
        constructor(_json: EdgeJson);
        /**
            * Gets an Edge by UUID.
            * @param uuid Edge UUID
            * @returns {Promise<Edge>} promise that resolves with the Edge
            */
        static getEdge(uuid: string): Promise<Edge>;
        readonly entityType: EntityType;
        /**
            * Gets the status of the Edge gateway.
            * @returns {string} status
            */
        readonly status: EdgeStatus;
        /**
            * Gets the UUID of the associated vDC.
            * @returns {string} vDC UUID
            */
        readonly vdcUuid: string;
        /**
            * Gets the UUID of the associated Org.
            * @returns {string} org UUID
            */
        readonly orgUuid: string;
        /**
            * Gets the Edges network interfaces.
            * @returns {[EdgeInterface]} array of interfaces
            */
        readonly interfaces: Array<EdgeInterface>;
        /**
            * Indicates whether the edge is in backwards compatibility mode.
            * @returns {boolean} value
            */
        readonly backwardCompatibilityMode: boolean;
        /**
            * Gets the type of backing configuration.
            * @returns {EdgeBackingConfigurationType} backing configuration type
            */
        readonly backingConfigurationType: EdgeBackingConfigurationType;
        /**
            * Indicates whether high availability mode is enabled.
            * @returns {boolean} value
            */
        readonly highAvailabilityEnabled: boolean;
        /**
            * Indicates whether this edge is the default DNS relay route.
            * @returns {boolean} value
            */
        readonly defaultDnsRelayRoute: boolean;
        /**
            * Gets the data center location ID that the edge is associated with.
            * @returns {string} location ID
            */
        readonly locationId: string;
        /**
            * Gets the description.
            * @returns {string} description
            */
        readonly description: string;
        /**
            * Gets the vCloud HREF.
            * @returns {string|null} vCloud HREF
            */
        readonly vcloudHref: string | null;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {EdgeJson} the JSON representation
            */
        readonly json: EdgeJson;
        /**
            * Refreshes the Edge data by retrieving it from the API again.
            * @returns {Promise<Edge>} promise that resolves with this object
            */
        refresh(): Promise<Edge>;
}
/**
    * Edge status enumeration.
    */
export type EdgeStatus = 'UP' | 'DOWN';

/**
    * Edge Gateway Interface.
    */
export class EdgeInterface {
        constructor(_json: EdgeInterfaceJson);
        /**
            * Gets the interface name.
            * @returns {string} interface name
            */
        readonly name: string;
        /**
            * Gets the display name.
            * @returns {string} display name
            */
        readonly displayName: string;
        /**
            * Gets the incoming rate limit setting.
            * @returns {number} incoming rate limit
            */
        readonly inRateLimit: number;
        /**
            * Gets the outgoing rate limit setting.
            * @returns {number} outgoing rate limit
            */
        readonly outRateLimit: number;
        /**
            * Gets the interface type.
            * @returns {EdgeInterfaceType} interface type
            */
        readonly type: EdgeInterfaceType;
        /**
            * Indicates whether rate limiting is enabled on this edge.
            * @returns {boolean} value
            */
        readonly rateLimitEnabled: boolean;
        /**
            * Indicates whether this edge is used as the default DNS relay route.
            * @returns {boolean} value
            */
        readonly defaultRoute: boolean;
        /**
            * Gets the name of the network that is attached to this interface.
            * @returns {string} network name
            */
        readonly networkName: string;
        /**
            * Gets the UUID of the network that is attached to this interface.
            * @returns {string} network UUID
            */
        readonly networkUuid: string;
        /**
            * Gets the subnet participation information.
            * @returns {[EdgeSubnetParticipation]} subnet participation array
            */
        readonly subnetParticipation: Array<EdgeSubnetParticipation>;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {EdgeInterfaceJson} the JSON representation
            */
        readonly json: EdgeInterfaceJson;
}

/**
    * Edge Gateway Subnet Participation.
    */
export class EdgeSubnetParticipation {
        constructor(_json: EdgeSubnetParticipationJson);
        /**
            * Gets the gateway address on the network.
            * @returns {string} gateway address
            */
        readonly gatewayAddress: string;
        /**
            * Gets the networks netmask.
            * @returns {string} netmask
            */
        readonly netmask: string;
        /**
            * Gets the IP address.
            * @returns {string} IP address
            */
        readonly ipAddress: string;
        /**
            * Gets the assigned IP ranges.
            * @returns {[IpRange]} IP address ranges
            */
        readonly ipRanges: Array<IpRange>;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {EdgeSubnetParticipationJson} the JSON representation
            */
        readonly json: EdgeSubnetParticipationJson;
}

/**
    * Internal Network.
    */
export class InternalNetwork extends AbstractNetwork {
        constructor(_json: InternalNetworkJson);
        /**
            * Gets an internal network by UUID.
            * @param uuid internal network UUID
            * @returns {Promise<InternalNetwork>} promise that resolves with the internal network
            */
        static getInternalNetwork(uuid: string): Promise<InternalNetwork>;
        readonly entityType: EntityType;
        /**
            * Gets the UUID of the edge gateway that the network is connected to, if its a NAT routed network or null otherwise.
            * @returns {string|null} edge gateway UUID or null
            */
        readonly edgeUuid: string | null;
        /**
            * Indicates whether this network is shared with other vDCs within the same organization.
            * @returns {boolean} value
            */
        readonly shared: boolean;
        /**
            * Gets the raw JSON object from the API.
            * @returns {InternalNetworkJson} the API json object
            */
        readonly json: InternalNetworkJson;
        /**
            * Refreshes the internal network data by retrieving it from the API again.
            * @returns {Promise<InternalNetwork>} promise that resolves with this object
            */
        refresh(): Promise<InternalNetwork>;
}

/**
    * IP Range.
    */
export class IpRange {
        constructor(_json: IpRangeJson);
        /**
            * Gets the IP address at the start of the range.
            * @returns {string} start IP
            */
        readonly startAddress: string;
        /**
            * Gets the IP address at the end of the range.
            * @returns {string} end IP
            */
        readonly endAddress: string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {IpRangeJson} the JSON representation
            */
        readonly json: IpRangeJson;
}

/**
    * Metadata.
    */
export class Metadata<T extends MetadataType> {
        constructor(_json: MetadataJson<T>);
        /**
            * Gets the metadata key.
            * @returns {string} the key
            */
        readonly key: string;
        /**
            * Gets the metadata's access restriction type.
            * @returns {MetadataAccessMode} the type of access restriction
            */
        readonly access: MetadataAccessMode;
        /**
            * Gets the type of the metadata.
            * @returns {VirtualDiskType} the type
            */
        readonly type: MetadataTypeKey;
        /**
            * Gets the metadata value.
            * @returns {} the type
            */
        readonly value: T;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {MetadataJson} the API JSON representation of the metadata
            */
        readonly json: MetadataJson<T>;
}

/**
    * VM MKS Screen Ticket.
    */
export class MksScreenTicket {
        constructor(_json: MksScreenTicketJson);
        /**
            * Gets the VMX attribute.
            * @returns {string} vmx
            */
        readonly vmx: string;
        /**
            * Gets the ticket.
            * @returns {string}
            */
        readonly ticket: string;
        /**
            * Gets the host.
            * @returns {string}
            */
        readonly host: string;
        /**
            * Gets the port.
            * @returns {string}
            */
        readonly port: string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {MksScreenTicketJson} the JSON representation
            */
        readonly json: MksScreenTicketJson;
}

/**
    * IaaS Organization.
    */
export class Org extends Entity {
        constructor(_json: OrgJson);
        /**
            * Gets an Org by UUID.
            * @param uuid Org UUID
            * @returns {Promise<Org>} promise that resolves with the Org
            */
        static getOrg(uuid: string): Promise<Org>;
        readonly entityType: EntityType;
        /**
            * Indicates whether the Org is enabled.
            * @returns {boolean} value
            */
        readonly enabled: boolean;
        /**
            * Gets the description.
            * @returns {string} description
            */
        readonly description: string;
        /**
            * Gets the vCloud HREF
            * @returns {string} vCloud HREF
            */
        readonly vcloudHref: string;
        /**
            * Gets the datacenter location identifier.
            * @returns {string} location ID
            */
        readonly locationId: string;
        /**
            * Gets the Orgs max vApp runtime lease setting.
            * @returns {number} vApp max runtime lease
            */
        readonly vappMaxRuntimeLease: number;
        /**
            * Gets the vApps max storage lease setting.
            * @returns {number} vApp max storage lease
            */
        readonly vappMaxStorageLease: number;
        /**
            * Gets the Orgs vApp template max storage lease setting.
            * @returns {number} vApp template max storage lease
            */
        readonly vappTemplateMaxStorageLease: number;
        /**
            * Indicates whether the Org is configured such that vApps are deleted upon storage lease expiration vs. being marked
            * as an expired item.
            * @returns {boolean} value
            */
        readonly vappDeletedOnStorageLeaseExpiration: boolean;
        /**
            * Indicates whether the Org is configured such that vApp templates are deleted upon storage lease expiration vs.
            * being marked as an expired item.
            * @returns {boolean} value
            */
        readonly vappTemplateDeletedOnStorageLeaseExpiration: boolean;
        /**
            * Indicates whether the Org is a Zerto continuity target.
            * @returns {boolean} value
            */
        readonly zertoTarget: boolean;
        /**
            * Gets the full name of the organization.
            * @returns {string} full name
            */
        readonly fullName: string;
        /**
            * Gets the company ID (CRM).
            * @returns {string} company ID
            */
        readonly companyId: string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {OrgJson} the API json object
            */
        readonly json: OrgJson;
        /**
            * Refreshes the Org data by retrieving it from the API again.
            * @returns {Promise<Org>} promise that resolves with this object
            */
        refresh(): Promise<Org>;
        /**
            * Gets the Orgs child vDCs.
            * @returns {Promise<Vdc[]>} promise that resolves with an array of child vDCs
            */
        getVdcs(): Promise<Array<Vdc>>;
        /**
            * Gets the Orgs child vApps.
            * @returns {Promise<Vapp[]>} promise that resolves with an array of child vApps
            */
        getVapps(): Promise<Array<Vapp>>;
        /**
            * Gets the Orgs child VMs.
            * @returns {Promise<Vm[]>} promise that resolves with an array of child VMs
            */
        getVms(): Promise<Array<Vm>>;
        /**
            * Gets the Orgs child Edges.
            * @returns {Promise<Edge[]>} promise that resolves with an array of child Edges
            */
        getEdges(): Promise<Array<Edge>>;
        /**
            * Gets the Orgs child internal networks.
            * @returns {Promise<InternalNetwork[]>} promise that resolves with an array of child Internal networks
            */
        getInternalNetworks(): Promise<Array<InternalNetwork>>;
        /**
            * Gets the Orgs child vApp networks.
            * @returns {Promise<VappNetwork[]>} promise that resolves with an array of child vApp networks
            */
        getVappNetworks(): Promise<Array<VappNetwork>>;
}

/**
    * VM Screen Ticket.
    */
export class ScreenTicket {
        constructor(_json: ScreenTicketJson);
        /**
            * Gets the VM ID attribute.
            * @returns {string} VM ID
            */
        readonly vmId: string;
        /**
            * Gets the ticket.
            * @returns {string}
            */
        readonly ticket: string;
        /**
            * Gets the host.
            * @returns {string}
            */
        readonly host: string;
        /**
            * Gets the SSL thumbprint.
            * @returns {string}
            */
        readonly sslThumbprint: string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {ScreenTicketJson} the JSON representation
            */
        readonly json: ScreenTicketJson;
}

/**
    * Snapshot.
    */
export class Snapshot {
        constructor(_json: SnapshotJson);
        /**
            * Gets the date that the snapshot was created.
            * @returns {Date} the creation date
            */
        readonly creationDate: Date;
        /**
            * Gets the size of the snapshot.
            * @returns {number} size
            */
        readonly size: number;
        /**
            * Indicates whether the snapshot is powered on.
            * @returns {boolean} value
            */
        readonly poweredOn: boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {SnapshotJson} the JSON representation
            */
        readonly json: SnapshotJson;
}

/**
    * Virtual Application.
    */
export class Vapp extends Entity {
        constructor(_json: VappJson);
        /**
            * Gets a vApp by UUID.
            * @param uuid vApp UUID
            * @returns {Promise<Vapp>} promise that resolves with the vApp
            */
        static getVapp(uuid: string): Promise<Vapp>;
        readonly entityType: EntityType;
        /**
            * Indicates whether this vApp is currently deployed.
            * @returns {boolean} value
            */
        readonly deployed: boolean;
        /**
            * Gets the vApps current power status.
            * @returns {VappPowerStatus} power status
            */
        readonly powerStatus: VappPowerStatus;
        /**
            * Gets the storage profiles that are associated with this VM
            * @returns {Array<string>} array of storage profile UUIDs
            */
        readonly storageProfiles: Array<string>;
        /**
            * Gets the runtime lease setting, in seconds.
            * @returns {number} runtime lease
            */
        readonly runtimeLease: number;
        /**
            * Gets the storage lease setting, in seconds.
            * @returns {number} storage lease
            */
        readonly storageLease: number;
        /**
            * Gets the expiration date of the runtime lease, if one is currently active.
            * @returns {Date} runtime lease expiration date
            */
        readonly runtimeLeaseExpirationDate: Date | null;
        /**
            * Gets the expiration date of the storage lease, if one is currently active.
            * @returns {Date} storage lease expiration date
            */
        readonly storageLeaseExpirationDate: Date | null;
        /**
            * Gets the UUID of the vDC that this vApp is associated with.
            * @returns {string} vDC UUID
            */
        readonly vdcUuid: string;
        /**
            * Gets the UUID of the Org that this vApp is associated with.
            * @returns {string} org UUID
            */
        readonly orgUuid: string;
        /**
            * Gets the datacenter location identifier for the vApp.
            * @returns {string} datacenter location ID
            */
        readonly locationId: string;
        /**
            * Gets the vApps description.
            * @returns {string} description
            */
        readonly description: string;
        /**
            * Gets the vCloud HREF of the vApp.
            * @returns {string} vCloud HREF
            */
        readonly vcloudHref: string;
        /**
            * Gets the date that this vApp was created.
            * @returns {Date} creation date
            */
        readonly creationDate: Date;
        /**
            * Indicates whether this vApp is currently in the expired items bin.
            * @returns {boolean} value
            */
        readonly expired: boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VappJson} the API json object
            */
        readonly json: VappJson;
        /**
            * Refreshes the vApp data by retrieving it from the API again.
            * @returns {Promise<Vapp>}
            */
        refresh(): Promise<Vapp>;
        /**
            * Gets the vApps child VMs.
            * @returns {Promise<Vm[]>} promise that resolves with an array of child VMs
            */
        getVms(): Promise<Array<Vm>>;
        /**
            * Gets the vApps child vApp Networks.
            * @returns {Promise<VappNetwork[]>} promise that resolves with an array of child vApp Networks
            */
        getVappNetworks(): Promise<Array<VappNetwork>>;
}
/**
    * Enumeration of possible vApp power statuses.
    */
export type VappPowerStatus = VappStatus | 'PARTIALLY_POWERED_OFF';

/**
    * Virtual Data Center.
    */
export class Vdc extends Entity {
        constructor(_json: VdcJson);
        /**
            * Gets a vDC by UUID.
            * @param uuid vDC UUID
            * @returns {Promise<Vdc>} promise that resolves with the vDC
            */
        static getVdc(uuid: string): Promise<Vdc>;
        readonly entityType: EntityType;
        /**
            * Indicates whether the vDC is enabled.
            * @returns {boolean} value
            */
        readonly enabled: boolean;
        /**
            * Gets the vCenter HREF.
            * @returns {string} vCenter HREF
            */
        readonly vcenterMoref: string;
        /**
            * Gets the vCenter name.
            * @returns {string} vCenter name
            */
        readonly vcenterName: string;
        /**
            * Gets the description.
            * @returns {string} description
            */
        readonly description: string;
        /**
            * Gets the vCloud HREF
            * @returns {string} vCloud HREF
            */
        readonly vcloudHref: string;
        /**
            * Gets the vCenter instance UUID.
            * @returns {string} vCenter instance UUID
            */
        readonly vcenterInstanceUuid: string;
        /**
            * Gets the vCenter HREF
            * @returns {string} vCenter HREF
            */
        readonly vcenterHref: string;
        /**
            * Gets the vDC allocation model
            * @returns {VdcAllocationModel} allocation model identifier
            */
        readonly allocationModel: VdcAllocationModel;
        /**
            * Gets the amount of reserved CPU
            * @returns {number} reserved cpu
            */
        readonly reservedCpu: number;
        /**
            * Gets the amount of reserved memory.
            * @returns {number} reserved memory
            */
        readonly reservedMemory: number;
        /**
            * Gets the disk limit within the vDc.
            * @returns {number} disk limit
            */
        readonly diskLimit: number;
        /**
            * Gets the amount of CPU allocated
            * @returns {number} allocated CPU
            */
        readonly allocatedCpu: number;
        /**
            * Gets the amount of memory allocated
            * @returns {number} allocated memory
            */
        readonly allocatedMemory: number;
        /**
            * Gets the maximum hardware version of the vDC.
            * @returns {string} max hardware version
            */
        readonly maxHardwareVersion: string;
        /**
            * Gets the network quota.
            * @returns {number} network quota
            */
        readonly networkQuota: number;
        /**
            * Gets the number of networks that exist within this vDC.
            * @returns {number} used network count
            */
        readonly usedNetworkCount: number;
        /**
            * Gets the datacenter location identifier.
            * @returns {string} location ID
            */
        readonly locationId: string;
        /**
            * Gets the UUID of the organization that the vDC is associated with.
            * @returns {string} Org UUID
            */
        readonly orgUuid: string;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VdcJson} the API json object
            */
        readonly json: VdcJson;
        /**
            * Refreshes the vDC data by retrieving it from the API again.
            * @returns {Promise<Vdc>}
            */
        refresh(): Promise<Vdc>;
        /**
            * Gets the vDCs child vApps.
            * @returns {Promise<Vapp[]>} promise that resolves with an array of child vApps
            */
        getVapps(): Promise<Array<Vapp>>;
        /**
            * Gets the vDCs child VMs.
            * @returns {Promise<Vm[]>} promise that resolves with an array of child VMs
            */
        getVms(): Promise<Array<Vm>>;
}

/**
    * Virtual Disk.
    */
export class VirtualDisk {
        constructor(_apiDisk: VirtualDiskJson);
        /**
            * Gets the name of the virtual disk.
            * @returns {string} the name
            */
        readonly name: string;
        /**
            * Gets the size of the virtual disk in MB.
            * @returns {number} size in MB
            */
        readonly size: number;
        /**
            * Gets the Virtual Hard Disk type.
            * @returns {VirtualDiskType} the type
            */
        readonly type: VirtualDiskType;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VirtualDiskJson} the API virtual disk object
            */
        readonly json: VirtualDiskJson;
}

/**
    * vApp Network.
    */
export class VappNetwork extends AbstractNetwork {
        constructor(_json: VappNetworkJson);
        /**
            * Gets an vApp network by UUID.
            * @param uuid vApp network UUID
            * @returns {Promise<VappNetwork>} promise that resolves with the vApp network
            */
        static getVappNetwork(uuid: string): Promise<VappNetwork>;
        /**
            * Gets the entity type.
            * @returns {EntityType}
            */
        readonly entityType: EntityType;
        /**
            * Gets the UUID of the vApp that the network is associated with.
            * @returns {string} vApp UUID
            */
        readonly vappUuid: string | null;
        /**
            * If this is a NAT Routed network, gets the external IP of the router for the vApp Network edge gateway.
            * @returns {string} IP address
            */
        readonly routerExternalIp: string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VappNetworkJson} the API json object
            */
        readonly json: VappNetworkJson;
        /**
            * Refreshes the vApp network data by retrieving it from the API again.
            * @returns {Promise<VappNetwork>} promise that resolves with this object
            */
        refresh(): Promise<VappNetwork>;
}

/**
    * Abstract Network.
    */
export abstract class AbstractNetwork extends Entity {
        protected _json: AbstractNetworkJson;
        constructor(_json: AbstractNetworkJson);
        /**
            * Gets the description.
            * @returns {string} description
            */
        readonly description: string;
        /**
            * Gets the datacenter location identifier.
            * @returns {string} location ID
            */
        readonly locationId: string;
        /**
            * Gets the UUID of the Org that the network is associated with.
            * @returns {string} Org UUID
            */
        readonly orgUuid: string;
        /**
            * Gets the UUID of the vDC that the network is associated with.
            * @returns {string} vDC UUID
            */
        readonly vdcUuid: string;
        /**
            * Gets the primary DNS host.
            * @returns {string} primary DNS host
            */
        readonly primaryDns: string;
        /**
            * Gets the secondary DSN host.
            * @returns {string} secondary DNS host
            */
        readonly secondaryDns: string;
        /**
            * Gets the DNS suffix.
            * @returns {string} DNS suffix
            */
        readonly dnsSuffix: string;
        /**
            * Gets the networks fence mode.
            * @returns {NetworkFenceMode} fence mode
            */
        readonly fenceMode: NetworkFenceMode;
        /**
            * Gets the gateway address of the network.
            * @returns {string} gateway address
            */
        readonly gatewayAddress: string;
        /**
            * Gets the netmask of the network.
            * @returns {string} netmask
            */
        readonly netmask: string;
        /**
            * Gets the static IP Ranges for the newtork.
            * @returns {[IpRange]} static IP ranges
            */
        readonly ipRanges: Array<IpRange>;
        /**
            * Indicates whether this network is inherited.
            * @returns {boolean} value
            */
        readonly inherited: boolean;
        /**
            * Gets the UUID of the parent external network if this is a bridged network, otherwise null.
            * @returns {string|null} parent external network UUID
            */
        readonly parentNetworkUuid: string | null;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Cpu Update Request.
    */
export class VmCpuUpdateRequest {
        numberOfCpus: number;
        coresPerSocket: number;
        /**
            * Creaets a new VM CPU update request.
            * @param {number} numberOfCpus the number of CPUs
            * @param {number} coresPerSocket the number of cores per socket
            */
        constructor(numberOfCpus: number, coresPerSocket?: number);
        /**
            * Gets JSON API representation.
            * @returns {VmCpuUpdateRequestJson} the JSON API representation
            */
        readonly json: VmCpuUpdateRequestJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VM Create Snapshot Request.
    */
export class VmCreateSnapshotRequest {
        name: string;
        description: string;
        memory: boolean;
        quiesce: boolean;
        /**
            * Creates a new VM snapshot creation requeset.
            * @param {string} name the snapshot name
            * @param {string} description the snapshot description
            * @param {boolean} memory whether to snapshot the VM's memory
            * @param {boolean} quiesce whether to quiesce the filesystem before taking the snapshot
            */
        constructor(name: string, description: string, memory: boolean, quiesce: boolean);
        /**
            * Gets JSON API representation.
            * @returns {VmCreateSnapshotRequestJson} the JSON API representation
            */
        readonly json: VmCreateSnapshotRequestJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Company.
    */
export class Company extends Entity {
        constructor(_json: CompanyJson);
        /**
            * Gets an Company by ID.
            * @param id Company ID
            * @returns {Promise<Company>} promise that resolves with the Company
            */
        static getCompany(id: string): Promise<Company>;
        readonly entityType: EntityType;
        /**
            * Indicates whether the company has the iland cloud product.
            * @returns {boolean} value
            */
        readonly hasIlandCloud: boolean;
        /**
            * Indicates whether the company has the iland backup product.
            * @returns {boolean} value
            */
        readonly hasIlandBackup: boolean;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CompanyJson} the JSON representation
            */
        readonly json: CompanyJson;
        /**
            * Refreshes the Company data by retrieving it from the API again.
            * @returns {Promise<Company>} promise that resolves with this object
            */
        refresh(): Promise<Company>;
        /**
            * Get company roles.
            * @returns {Promise<Array<Role>>} task promise
            */
        getRoles(): Promise<Array<Role>>;
        /**
            * Get a company role.
            * @returns {Promise<Role>} a promise with the queried role
            */
        getRole(uuid: string): Promise<Role>;
        /**
            * Creates a new company role.
            * @returns {Promise<Role>} a promise with the newly created role
            */
        createRole(request: RoleCreationRequest): Promise<Role>;
        /**
            * Updates a company role.
            * @returns {Promise<Role>} a promise with the newly created role that has replaced the original
            */
        updateRole(uuid: string, request: RoleCreationRequest): Promise<Role>;
        /**
            * Deletes a new company role.
            * @returns {Promise<void>} a promise that indicates success or failure
            */
        deleteRole(uuid: string): Promise<void>;
        /**
            * Gets all company users.
            * @returns {Promise<Array<User>>} a promise with the list of the company users
            */
        getUsers(): Promise<Array<User>>;
        /**
            * Gets all company users that are assigned to a specified role.
            * @returns {Promise<Array<User>>} a promise with the list of the company users that are assigned to the role
            */
        getUsersWithRole(roleUuid: string): Promise<Array<User>>;
        /**
            * A company may have multiple user domains if they have users that are shared with other companies. This method
            * returns the identifiers for all domains that are associated with this company.
            * @returns {Promise<Array<string>>} a promise with the list of the company user domains
            */
        getUserDomains(): Promise<Array<string>>;
        /**
            * Creates a new company user.
            * @returns {Promise<User>} a promise with the newly created user
            */
        createUser(request: UserCreationRequest): Promise<User>;
}

/**
    * User Creation Request.
    */
export class UserCreationRequest {
        domain: string;
        username: string;
        fullName: string;
        email: string;
        password: string;
        /**
            * Creates a new user creation request.
            * @param {string} domain the users' domain
            * @param {string} username the user's username
            * @param {string} fullName the users's full name
            * @param {string} email the user's email address
            * @param {string} password the user's initial password
            */
        constructor(domain: string, username: string, fullName: string, email: string, password: string);
        /**
            * Gets the raw JSON object from the API.
            * @returns {UserCreationRequestJson} the JSON representation
            */
        readonly json: UserCreationRequestJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
}

/**
    * Role Creation Request Implementation.
    */
export class RoleCreationRequest {
        companyId: string;
        name: string;
        description: string;
        policies: Array<Policy>;
        /**
            * Creates a new role creation request.
            * @param {string} companyId the ID of the company that the role will be created in
            * @param {string} name the name of the role
            * @param {string} description the description of the role
            * @param {Array<Policy>} policies the policies that define the role
            */
        constructor(companyId: string, name: string, description: string, policies: Array<Policy>);
        /**
            * Gets the raw JSON object for the API.
            * @returns {RoleCreationRequestJson} JSON representation
            */
        readonly json: RoleCreationRequestJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Return the policy for the specified uuid.
            * @param {string} entityUuid
            * @returns {Policy | null}
            */
        getPolicy(entityUuid: string): Policy | null;
}
/**
    * Role Creation Request Builder.
    */
export class RoleCreationRequestBuilder {
        constructor(_companyId: string, _name: string, _description: string);
        /**
            * Sets the name for the role creation request.
            * @param {string} name
            * @returns {RoleCreationRequestBuilder} the builder
            */
        setName(name: string): RoleCreationRequestBuilder;
        /**
            * Sets the description for the role creation request.
            * @param {string} description
            * @returns {RoleCreationRequestBuilder} the builder
            */
        setDescription(description: string): RoleCreationRequestBuilder;
        /**
            * Sets a policy on the role creation request.
            * @param {Policy} policy
            * @returns {RoleCreationRequestBuilder} the builder
            */
        setPolicy(policy: Policy): RoleCreationRequestBuilder;
        /**
            * Removes a policy for a specified entity.
            * @param {string} entityUuid the UUID of the entity
            * @returns {RoleCreationRequestBuilder} the builder
            */
        removePolicy(entityUuid: string): RoleCreationRequestBuilder;
        /**
            * Clears all policies.
            * @returns {RoleCreationRequestBuilder} the builder
            */
        clearPolicies(): RoleCreationRequestBuilder;
        /**
            * Builds the RoleCreationRequest.
            * @returns {RoleCreationRequest}
            */
        build(): RoleCreationRequest;
}

/**
    * Role.
    */
export class Role {
        constructor(_json: RoleJson);
        /**
            * Gets the UUID of the role.
            * @returns {string} role UUID
            */
        readonly uuid: string;
        /**
            * Gets the ID of the company that the role is associated with.
            * @returns {string} company ID
            */
        readonly companyId: string;
        /**
            * Gets the name of the role.
            * @returns {string} the role name
            */
        readonly name: string;
        /**
            * Gets the role description.
            * @returns {string}
            */
        readonly description: string;
        /**
            * Gets the policies that define the role.
            * @returns {Array<Policy>} the array of role policies
            */
        readonly policies: Array<Policy>;
        /**
            * Gets the role type.
            * @returns {RoleType} role type
            */
        readonly type: RoleType;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Return the policy for the specified uuid.
            * @param {string} entityUuid
            * @returns {Policy | null}
            */
        getPolicy(entityUuid: string): Policy | null;
        /**
            * Gets the raw JSON object from the API.
            * @returns {RoleJson} the JSON representation
            */
        readonly json: RoleJson;
}

/**
    * Policy.
    */
export class Policy {
        constructor(_json: PolicyJson);
        /**
            * Gets the entity UUID associated with the policy.
            * @returns {string} the entity UUID
            */
        readonly entityUuid: string;
        /**
            * Gets the entity domain of the policy.
            * @returns {EntityDomainType} the entity domain
            */
        readonly entityDomain: EntityDomainType;
        /**
            * Gets the policy type.
            * @returns {PolicyType} the policy type
            */
        readonly type: PolicyType;
        /**
            * Gets the permissions assigned to the policy.
            * @returns {Array<PermissionType>} the policy permissions
            */
        readonly permissions: Array<PermissionType>;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Gets the raw JSON object from the API.
            * @returns {PolicyJson} the JSON representation
            */
        readonly json: PolicyJson;
        /**
            * Indicate whether the policy has the specified permission.
            * @param {PermissionType} permissionType
            * @returns {boolean}
            */
        hasPermission(permissionType: PermissionType): boolean;
}
/**
    * Policy Builder.
    */
export class PolicyBuilder {
        /**
            * Creates a new PolicyBuilder.
            * @param {string} _entityUuid the UUID of the entity that the policy will apply to
            * @param {EntityDomainType} _entityDomain the EntityDomain of the entity that the policy will apply to
            * @param {PolicyType} _type the policy type
            */
        constructor(_entityUuid: string, _entityDomain: EntityDomainType, _type: PolicyType);
        /**
            * Set an array of permissions.
            * @param {Array<PermissionType>} array
            * @throws Error
            */
        setPermissions(array: Array<PermissionType>): PolicyBuilder;
        /**
            * Adds a permission.
            * @param {PermissionType} permission the permission to add
            * @returns {PolicyBuilder} the builder
            * @throws Error
            */
        addPermission(permission: PermissionType): PolicyBuilder;
        /**
            * Removes a permission.
            * @param {PermissionType} permission the permission to remove
            * @returns {PolicyBuilder} the builder
            */
        removePermission(permission: PermissionType): PolicyBuilder;
        /**
            * Builds the policy.
            * @returns {Policy} the new policy
            */
        build(): Policy;
}

/**
    * User inventory.
    */
/**
    * Inventory entity properties.
    */
export class InventoryEntity {
        constructor(_json: UserInventoryEntityJson);
        /**
            * Gets the UUID of the entity.
            * @returns {string} UUID
            */
        readonly uuid: string;
        /**
            * Gets the type of the entity.
            * @returns {EntityDomainType} entity type
            */
        readonly type: EntityDomainType;
        /**
            * Gets the name of the entity.
            * @returns {string} entity name
            */
        readonly name: string;
        /**
            * Gets the UUID of the parent entity.
            * @returns {string} the parent entity UUID
            */
        readonly parentUuid: string | null;
        /**
            * Gets the type of the parent entity.
            * @returns {EntityDomainType} the parent entity type
            */
        readonly parentType: EntityDomainType | null;
}
export class CompanyInventory {
        constructor(_inventory: UserCompanyInventoryJson);
        readonly companyId: string;
        /**
            * Get an inventory entity by UUID.
            * @param uuid {string} UUID of the entity
            * @returns {InventoryEntity|undefined}
            */
        getEntityByUuid(uuid: string): InventoryEntity | undefined;
        /**
            * Get all entities mapped by their types.
            * @returns {{[p: string]: Array<InventoryEntity>}}
            */
        getAllEntitiesByType(): {
                [type: string]: Array<InventoryEntity>;
        };
        /**
            * Get an array of inventory entities of the specified type.
            * @param {EntityDomainType} type
            * @returns {Array<InventoryEntity> | undefined}
            */
        getEntitiesByType(type: EntityDomainType): Array<InventoryEntity> | undefined;
        /**
            * Gets the map of children belonging to an entity.
            * @param {string} uuid
            * @returns {{[type: string]: Array<InventoryEntity>} | undefined}
            */
        getChildrenForEntity(uuid: string): {
                [type: string]: Array<InventoryEntity>;
        } | undefined;
}

/**
    * Media.
    */
export class Media extends Entity {
        constructor(_json: MediaJson);
        /**
            * Get the Media from API.
            * @param {string} uuid
            * @returns {Promise<Media>} promise that resolves with the Media
            */
        static getMedia(uuid: string): Promise<Media>;
        /**
            * Get entity type for Media
            * @returns {EntityType}
            */
        readonly entityType: EntityType;
        /**
            * Refreshes the Media data by retrieving it from the API again.
            * @returns {Promise<Media>} promise that resolves with the Media
            */
        refresh(): Promise<Media>;
        /**
            * Get Media status.
            * @returns {number}
            */
        readonly status: number;
        /**
            * Get Media size.
            * @returns {number}
            */
        readonly size: number;
        /**
            * Indicate whether the Media is public or not.
            * @returns {boolean}
            */
        readonly isPublic: boolean;
        /**
            * Get Media location ID
            * @returns {string}
            */
        readonly locationId: string;
        /**
            * Get Media org uuid.
            * @returns {string}
            */
        readonly orgUuid: string;
        /**
            * Get Media catalog uuid.
            * @returns {string}
            */
        readonly catalogUuid: string;
        /**
            * Get Media storageProfile uuid.
            * @returns {string}
            */
        readonly storageProfileUuid: string;
        /**
            * Get Media vDc uuid.
            * @returns {string}
            */
        readonly vdcUuid: string;
        /**
            * Get Media description
            * @returns {string}
            */
        readonly description: string;
        /**
            * Get Media vCloudHref.
            * @returns {string}
            */
        readonly vcloudHref: string;
        /**
            * Get Media creation date.
            * @returns {Date}
            */
        readonly createdDate: Date;
        /**
            * Gets the raw JSON object from the API.
            * @returns {MediaJson} the JSON representation
            */
        readonly json: MediaJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
}

/**
    * VappTemplate
    */
export class VappTemplate extends Entity {
        constructor(_json: VappTemplateJson);
        /**
            * Get the VappTemplate from API.
            * @param {string} uuid
            * @returns {Promise<VappTemplate>} promise that resolves with the VappTemplate.
            */
        static getVappTemplate(uuid: string): Promise<VappTemplate>;
        /**
            * Get VappTemplate entity type.
            * @returns {EntityType}
            */
        readonly entityType: EntityType;
        /**
            * Get VappTemplate description
            * @returns {string}
            */
        readonly description: string;
        /**
            * Get VappTemplate vCloudHref.
            * @returns {string}
            */
        readonly vcloudHref: string;
        /**
            * Get VappTemplate status
            * @returns {number}
            */
        readonly status: number;
        /**
            * Get VappTemplate size.
            * @returns {number}
            */
        readonly size: number;
        /**
            * Indicate whether the VappTemplate is customisable or not.
            * @returns {boolean}
            */
        readonly isCustomisable: boolean;
        /**
            * Indicate whether the VappTemplate customization is required or not.
            * @returns {boolean}
            */
        readonly isCustomizationRequired: boolean;
        /**
            * Indicate whether the VappTemplate is gold master or not.
            * @returns {boolean}
            */
        readonly isGoldMaster: boolean;
        /**
            * Indicate whether the VappTemplate is public or not.
            * @returns {boolean}
            */
        readonly isPublic: boolean;
        /**
            * Get VappTemplate storage profile uuid.
            * @returns {string}
            */
        readonly storageProfileUuid: string;
        /**
            * Get VappTemplate vDc uuid
            * @returns {string}
            */
        readonly vdcUuid: string;
        /**
            * Get VappTemplate location ID
            * @returns {string}
            */
        readonly locationId: string;
        /**
            * Get VappTemplate org uuid
            * @returns {string}
            */
        readonly orgUuid: string;
        /**
            * Get VappTemplate catalog uuid
            * @returns {string}
            */
        readonly catalogUuid: string;
        /**
            * Get VappTemplate creation date
            * @returns {Date}
            */
        readonly createdDate: Date;
        /**
            * Indicate whether the VappTemplate is expired or not.
            * @returns {boolean}
            */
        readonly isExpired: boolean;
        /**
            * Gets the raw JSON object from the API.
            * @returns {VappTemplateJson} the API json object
            */
        readonly json: VappTemplateJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Refreshes the VappTemplate data by retrieving it from the API again.
            * @returns {Promise<VappTemplate>} promise that resolves with this object
            */
        refresh(): Promise<VappTemplate>;
}

/**
    * Catalog.
    */
export class Catalog extends Entity {
        constructor(_json: CatalogJson);
        /**
            * Get the Catalog from API.
            * @param {string} uuid
            * @returns {Promise<Catalog>} promise that resolves with the Catalog
            */
        static getCatalog(uuid: string): Promise<Catalog>;
        readonly originalUuid: string;
        readonly uuid: string;
        /**
            * Get entity type for catalog.
            * @returns {EntityType}
            */
        readonly entityType: EntityType;
        /**
            * Get location ID
            * @returns {string}
            */
        readonly locationId: string;
        /**
            * Indicate whether the catalog is shared or not.
            * @returns {boolean}
            */
        readonly isShared: boolean;
        /**
            * Indicate whether the catalog is public or not.
            * @returns {boolean}
            */
        readonly isPublic: boolean;
        /**
            * Get the catalog version
            * @returns {number}
            */
        readonly version: number;
        /**
            * Get org uuid for catalog.
            * @returns {string}
            */
        readonly orgUuid: string;
        /**
            * Get description for catalog
            * @returns {string}
            */
        readonly description: string;
        /**
            * Get vCloudHref for catalog
            * @returns {string}
            */
        readonly vcloudHref: string;
        /**
            * Get the creation date
            * @returns {Date}
            */
        readonly createdDate: Date;
        /**
            * Gets the raw JSON object from the API.
            * @returns {CatalogJson} the JSON representation
            */
        readonly json: CatalogJson;
        /**
            * JSON format.
            * @returns {string}
            */
        toString(): string;
        /**
            * Refreshes the Catalog data by retrieving it from the API again.
            * @returns {Promise<Catalog>} promise that resolves with the Catalog
            */
        refresh(): Promise<Catalog>;
}

/**
    * Permission
    */
export class Permission {
        constructor(_permissionType: PermissionType, _domain: EntityDomainType, _accessType: AccessType, _availableToCustomPolicy: boolean, _requiredForCustomPolicy: boolean, _impliedPermissions: Array<PermissionType> | null);
        /**
            * Get the EntityDomainType for a permission.
            * @returns {EntityDomainType}
            */
        readonly domain: EntityDomainType;
        /**
            * Get the PermissionType for a permission.
            * @returns {PermissionType}
            */
        readonly permissionType: PermissionType;
        /**
            * Get the AccessType for a permission.
            * @returns {AccessType}
            */
        readonly accessType: AccessType;
        /**
            * Check whether or not this permission is available to custom policy.
            * @returns {boolean}
            */
        readonly availableToCustomPolicy: boolean;
        /**
            * Check whether or not a permission is required for custom policy.
            * @returns {boolean}
            */
        readonly requiredForCustomPolicy: boolean;
        /**
            * Get the implied permissions.
            * @returns {Array<PermissionType> | null}
            */
        readonly impliedPermissions: Array<PermissionType> | null;
        /**
            * Get the string representation of a permission. Which is the PermissionType.
            * @returns {string}
            */
        toString(): string;
        /**
            * Get the entity domain class for this permission.
            * @returns {EntityDomain}
            */
        getDomain(): EntityDomain;
}

/**
    * PermissionsMap
    */
export class PermissionsMap {
        /**
            * Get an instance of PermissionMap. Singleton implementation.
            * @returns {PermissionsMap}
            */
        static getInstance(): PermissionsMap;
        /**
            * Get the permissions map.
            * @returns {Map<PermissionType, Permission>}
            */
        readonly permissions: Map<PermissionType, Permission>;
}

/**
    * DomainPermissionsMap
    */
export class DomainPermissionsMap {
        /**
            * Get an instance of DomainPermissionsMap. Singleton implementation.
            * @returns {DomainPermissionsMap}
            */
        static getInstance(): DomainPermissionsMap;
        /**
            * Get the domains permissions map.
            * @returns {Map<EntityDomainType, Array<Permission>>}
            */
        readonly domainPermissions: Map<EntityDomainType, Array<Permission>>;
}

/**
    * EntityDomain
    */
export class EntityDomain {
        constructor(entityDomainType: EntityDomainType);
        /**
            * Return the string representation of this class. Which is an EntityDomainType
            * @returns {string}
            */
        toString(): string;
        /**
            * Get the parent entityDomain.
            * @returns {EntityDomain | null}
            */
        readonly parent: EntityDomain | null;
}

/**
    * UserWithSecurity
    */
export class UserWithSecurity extends User {
        constructor(_apiUser: UserJson);
        /**
            * Set the inventory for user.
            * @param {Array<CompanyInventory> | undefined} value
            */
        inventory: Array<CompanyInventory>;
        /**
            * Set the roles for user.
            * @param {Map<string, Role>} value
            */
        rolesCompanyMap: Map<string, Role>;
        /**
            * Gets a user by username.
            * @param username the user's username
            * @returns {Promise<User>}
            */
        static getUser(username: string): Promise<UserWithSecurity>;
        /**
            * Gets the currently authenticated user.
            * @returns {Promise<User>}
            */
        static getCurrentUser(): Promise<UserWithSecurity>;
        /**
            * Get user with security from an existing user.
            * @param {User} user
            * @returns {Promise<UserWithSecurity>}
            */
        static getUserWithSecurity(user: User): Promise<UserWithSecurity>;
        /**
            * Setup the userWithSecurity class. That will add the needed inventory and roles to the UserWithSecurity class.
            * @param {UserWithSecurity} userWithSecurity
            * @returns {Promise<UserWithSecurity>}
            */
        static setup(userWithSecurity: UserWithSecurity): Promise<UserWithSecurity>;
        /**
            * Get a list of all user's roles.
            * @returns {Promise<Array<Role>>}
            */
        getRoles(): Promise<Array<Role>>;
        /**
            * Check whether or not a user is allowed to perform an action or not.
            * @param {PermissionType} permissionType
            * @param {string} entityUuid
            * @returns {boolean}
            */
        isPermittedTo(permissionType: PermissionType, entityUuid: string): boolean;
}

/**
    * Authorization Provider interface.
    */
export interface AuthProvider {
        /**
            * Retrieve a token for authenticating with the iland APIs.
            */
        getToken(): Promise<string>;
        /**
            * Log out the current authentication session.
            */
        logout(): Promise<null>;
        /**
            * Gets the username of the currently authenticated user.
            * @returns {Promise<string>} username
            */
        getAuthenticatedUsername(): Promise<string>;
}
export const DEFAULT_AUTH_URL: string;
export const DEFAULT_REALM = "iland-core";

export class IlandBrowserAuthProvider implements AuthProvider {
        constructor(config: IlandBrowserAuthConfig);
        getToken(): Promise<string>;
        /**
            * Gets the username of the currently authenticated user.
            * @returns {string} username
            */
        getAuthenticatedUsername(): Promise<string>;
        /**
            * Log out the authenticated user.
            * @returns {Promise<any>} promise that resolves when logout is complete.
            */
        logout(): Promise<any>;
}
export interface IlandBrowserAuthConfig {
        clientId: string;
        url?: string;
}

export class IlandDirectGrantAuthProvider implements AuthProvider {
    constructor(_config: IlandDirectGrantAuthConfig);
    getToken(): Promise<string>;
    logout(): Promise<any>;
    getAuthenticatedUsername(): Promise<string>;
    _refreshToken(): Promise<Token>;
}
export interface Token {
    access_token: string;
    expires_in: number;
    refresh_token: string;
    expires_at: number;
}
export interface IlandDirectGrantAuthConfig {
    username: string;
    password: string;
    clientSecret: string;
    clientId: string;
    url?: string;
}

/**
    * IamService
    */
export class IamService {
        /**
            * Check whether or not a user is allowed to perform an action or not.
            * @param {UserWithSecurity} user
            * @param {string} entityUuid
            * @param {PermissionType} permissionType
            * @returns {boolean}
            */
        static isUserPermitted(user: UserWithSecurity, entityUuid: string, permissionType: PermissionType): boolean;
        /**
            * Derive effective policy from an ancestor.
            * @param {CompanyInventory} companyInventory
            * @param {Policy} ancestorPolicy
            * @param {InventoryEntity | undefined} target
            * @returns {Policy | null}
            */
        static deriveEffectivePolicyFromAncestor(companyInventory: CompanyInventory, ancestorPolicy: Policy, target: InventoryEntity | undefined): Policy | null;
        /**
            * Check whether or not an entity is accessible publicly.
            * @param {string} entityUuid
            * @param {PermissionType} permission
            * @returns {boolean}
            */
        static isPubliclyAccessible(entityUuid: string, permission: PermissionType): boolean;
        /**
            * Validate a role creation request.
            * @param {RoleCreationRequest} roleCreationRequest
            * @param {CompanyInventory} companyInventory
            * @returns {Array<Error>}
            */
        static validateRole(roleCreationRequest: RoleCreationRequest, companyInventory: CompanyInventory): Error[];
}

/**
    * PermissionService
    */
export class PermissionService {
        /**
            * Map of all permission listed by their PermissionType.
            */
        permissions: Map<PermissionType, Permission>;
        /**
            * Map of all permissions listed by their EntityDomainType.
            */
        domainPermissions: Map<EntityDomainType, Array<Permission>>;
        /**
            * Get the instance of PermissionService. Singleton implementation.
            * @returns {PermissionService}
            */
        static getInstance(): PermissionService;
        /**
            * Get the decorated permission for the specified permission type.
            * @param {PermissionType} permission
            * @returns {Permission | undefined}
            */
        static getPermission(permission: PermissionType): Permission | undefined;
        /**
            * Get implied permission for the current permission.
            * @param {Array<PermissionType> | undefined} _impliedPermissions
            * @returns {Array<Permission> | null}
            */
        getImpliedPermissions(_impliedPermissions: Array<PermissionType> | undefined): Array<Permission> | null;
        /**
            * Get all available permissions for an EntityDomainType.
            * @param {EntityDomainType} domain
            * @returns {Array<Permission> | undefined}
            */
        getAvailablePermissionsForDomain(domain: EntityDomainType): Array<Permission> | undefined;
        /**
            * Get all required permissions for an EntityDomainType.
            * @param {EntityDomainType | undefined} domain
            * @returns {Array<Permission> | undefined}
            */
        getRequiredPermissionsForDomain(domain: EntityDomainType | undefined): Array<Permission> | undefined;
        /**
            * Get all view permissions for an EntityDomainType.
            * @param {EntityDomainType | undefined} domain
            * @returns {Permission | undefined}
            */
        getViewPermissionForDomain(domain: EntityDomainType | undefined): Permission | undefined;
}

/**
  * Interface for API entity JSON representation.
  */
export interface EntityJson {
    name: string;
    uuid: string;
    deleted: boolean;
    deleted_date: number | null;
    updated_date: number;
}

/**
    * Api Task representation.
    */
export interface TaskJson {
        active: boolean;
        synchronized: boolean;
        uuid: string;
        status: TaskStatus;
        location_id: string;
        operation: TaskOperation;
        end_time: number | null;
        entity_uuid: string;
        initiated_from_ecs: boolean;
        initiation_time: number;
        message: string | null;
        operation_description: string;
        org_uuid: string;
        other_attributes: Map<string, any>;
        parent_task_uuid: string | null;
        progress: number;
        start_time: number | null;
        sub_tasks: Array<string>;
        task_id: string;
        task_type: TaskType;
        user_full_name: string;
        username: string;
}
/**
    * Enumeration of possible task types.
    */
export type TaskType = 'vcd' | 'veeam' | 'vi' | 'zerto' | 'reporting' | 'iland';
/**
    * Enumeration of possible task status values.
    */
export type TaskStatus = 'success' | 'running' | 'error' | 'cancelled' | 'queued' | 'waiting-on-user-input' | 'unknown';
/**
    * Enumeration of possible task operation values.
    */
export type TaskOperation = 'power on' | 'power off' | 'suspend' | 'shutdown' | 'reset' | 'reboot' | 'update memory size' | 'reset mac address' | 'reconfigure vm' | 'rename vm' | 'rename vapp' | 'update cpu count' | 'update disk size' | 'add virtual disk' | 'update vm disks' | 'delete virtual disk' | 'install VMWare tools' | 'update virtual network card' | 'vapp template enable download from vCloud' | 'vapp template enable download' | 'media enable download' | 'vapp enable download from vCloud' | 'vapp enable download' | 'delete virtual network card' | 'update firewall' | 'update nat service' | 'create snapshot' | 'restore snapshot' | 'remove snapshot' | 'delete entity' | 'update storage lease' | 'update runtime lease' | 'add vapp' | 'add vms' | 'update description' | 'update static routing' | 'update dhcp service' | 'update load balancer service' | 'update metadata' | 'delete metadata' | 'upgrade virtual hardware' | 'update startup section' | 'eject media' | 'insert media' | 'relocate vm' | 'create edge gateway' | 'delete edge gateway' | 'update vapp template' | 'update media' | 'capture vapp as vapp template' | 'update ipsec vpn service' | 'clone vm' | 'clone vapp' | 'clone media' | 'remove network from vapp' | 'add org vdc network to vapp' | 'add vapp network to vapp' | 'update vapp network' | 'update vapp firewall' | 'update vapp network dhcp' | 'update vapp network static routing' | 'update vapp network nat' | 'update guest customization section' | 'update vm capabilities' | 'update edge interface' | 'extend vdc resource pool' | 'create org vdc network' | 'delete org vdc network' | 'update org vdc network' | 'vmware tools upgrade' | 'update vm boot options' | 'update vm drs rules' | 'update vm tools upgrade policy' | 'restore backup' | 'zerto failover test' | 'zerto failover test initiation' | 'zerto failover test stop' | 'zerto failover commit' | 'zerto failover rollback' | 'zerto live failover' | 'zerto live failover initiation' | 'zerto batch live failover' | 'zerto batch test failover' | 'upload vapp template from ovf' | 'upload media from iso' | 'generate hipaa report' | 'generate vm encryption report' | 'generate login event history report' | 'generate support request report' | 'generate ecs event history report' | 'generate log inspection report' | 'generate anti malware report' | 'generate vulnerability report' | 'generate firewall event report' | 'generate integrity event report' | 'generate dpi event report' | 'generate web reputation event report' | 'generate vm inventory report' | 'generate dr admin report' | 'generate protection summary report' | 'generate billing report' | 'create catalog' | 'managed vapp shutdown' | 'generate failover test report' | 'update cloud tenant repository size';

/**
    * Interface for VM properties.
    */
export interface VmJson extends EntityJson {
        cores_per_socket: number;
        cpus_number: number;
        created_date: number | null;
        deployed: boolean;
        description: string;
        hardware_version: string;
        inserted_media_name: string;
        location_id: string;
        media_inserted: boolean;
        memory_size: number;
        org_uuid: string;
        os: OperatingSystem;
        status: VmStatus;
        storage_profiles: Array<string>;
        vapp_uuid: string;
        vcenter_href: string;
        vcenter_instance_uuid: string;
        vcenter_moref: string;
        vcenter_name: string;
        vcloud_href: string;
        vdc_uuid: string;
        vim_datastore_ref: string;
        vm_local_id: string;
}
/**
    * Enumeration of possible VM statuses from the API.
    */
export type VmStatus = 'FAILED_CREATION' | 'INCONSISTENT_STATE' | 'POWERED_OFF' | 'POWERED_ON' | 'SUSPENDED' | 'UNKNOWN' | 'UNRECOGNIZED' | 'UNRESOLVED' | 'WAITING_FOR_INPUT' | 'MIXED';
/**
    * Enumeration of possible VM operating system identifiers.
    */
export type OperatingSystem = 'asianux3_64Guest' | 'asianux3Guest' | 'asianux4_64Guest' | 'asianux4Guest' | 'asianux5_64Guest' | 'centos64Guest' | 'centosGuest' | 'coreos64Guest' | 'darwin10_64Guest' | 'darwin10Guest' | 'darwin11_64Guest' | 'darwin11Guest' | 'darwin12_64Guest' | 'darwin13_64Guest' | 'darwin14_64Guest' | 'darwin64Guest' | 'darwinGuest' | 'debian4_64Guest' | 'debian4Guest' | 'debian5_64Guest' | 'debian5Guest' | 'debian6_64Guest' | 'debian6Guest' | 'debian7_64Guest' | 'debian7Guest' | 'debian8_64Guest' | 'debian8Guest' | 'dosGuest' | 'eComStation2Guest' | 'eComStationGuest' | 'fedora64Guest' | 'fedoraGuest' | 'freebsd64Guest' | 'freebsdGuest' | 'genericLinuxGuest' | 'mandrakeGuest' | 'mandriva64Guest' | 'mandrivaGuest' | 'netware4Guest' | 'netware5Guest' | 'netware6Guest' | 'nld9Guest' | 'oesGuest' | 'openServer5Guest' | 'openServer6Guest' | 'opensuse64Guest' | 'opensuseGuest' | 'oracleLinux64Guest' | 'oracleLinuxGuest' | 'os2Guest' | 'other24xLinux64Guest' | 'other24xLinuxGuest' | 'other26xLinux64Guest' | 'other26xLinuxGuest' | 'other3xLinux64Guest' | 'other3xLinuxGuest' | 'otherGuest' | 'otherGuest64' | 'otherLinux64Guest' | 'otherLinuxGuest' | 'redhatGuest' | 'rhel2Guest' | 'rhel3_64Guest' | 'rhel3Guest' | 'rhel4_64Guest' | 'rhel4Guest' | 'rhel5_64Guest' | 'rhel5Guest' | 'rhel6_64Guest' | 'rhel6Guest' | 'rhel7_64Guest' | 'rhel7Guest' | 'sjdsGuest' | 'sles10_64Guest' | 'sles10Guest' | 'sles11_64Guest' | 'sles11Guest' | 'sles12_64Guest' | 'sles12Guest' | 'sles64Guest' | 'slesGuest' | 'solaris10_64Guest' | 'solaris10Guest' | 'solaris11_64Guest' | 'solaris6Guest' | 'solaris7Guest' | 'solaris8Guest' | 'solaris9Guest' | 'suse64Guest' | 'suseGuest' | 'turboLinux64Guest' | 'turboLinuxGuest' | 'ubuntu64Guest' | 'ubuntuGuest' | 'unixWare7Guest' | 'vmkernel5Guest' | 'vmkernel6Guest' | 'vmkernelGuest' | 'win2000AdvServGuest' | 'win2000ProGuest' | 'win2000ServGuest' | 'win31Guest' | 'win95Guest' | 'win98Guest' | 'windows7_64Guest' | 'windows7Guest' | 'windows7Server64Guest' | 'windows8_64Guest' | 'windows8Guest' | 'windows8Server64Guest' | 'windows9_64Guest' | 'windows9Guest' | 'windows9Server64Guest' | 'windowsHyperVGuest' | 'winLonghorn64Guest' | 'winLonghornGuest' | 'winMeGuest' | 'winNetBusinessGuest' | 'winNetDatacenter64Guest' | 'winNetDatacenterGuest' | 'winNetEnterprise64Guest' | 'winNetEnterpriseGuest' | 'winNetStandard64Guest' | 'winNetStandardGuest' | 'winNetWebGuest' | 'winNTGuest' | 'winVista64Guest' | 'winVistaGuest' | 'winXPHomeGuest' | 'winXPPro64Guest' | 'winXPProGuest';
/**
    * Specification for VM snapshot creation request.
    */
export interface VmCreateSnapshotRequestJson {
        memory: boolean;
        quiesce: boolean;
        name: string;
        description: string;
}
/**
    * Specification for VM memory configuration update request.
    */
export interface VmMemoryUpdateRequestJson {
        memory_size: string;
}
/**
    * Specification for VM description update request.
    */
export interface VmUpdateDescriptionRequestJson {
        description: string;
}
/**
    * Specification for VM name update request.
    */
export interface VmUpdateNameRequestJson {
        name: string;
}
/**
    * Specification for VM CPU configuration update request.
    */
export interface VmCpuUpdateRequestJson {
        cpus_number: number;
        cores_per_socket?: number;
}
/**
    * Specification for VM backup restore request.
    */
export interface VmRestoreBackupRequestJson {
        time: number;
}
/**
    * Specification for VM media insertion request.
    */
export interface VmInsertMediaRequestJson {
        media: string;
}
/**
    * Specification for VM storage profile relocation request.
    */
export interface VmRelocationRequestJson {
        storage_profile: string;
}
/**
    * Enumeration of the available power operations for a VM.
    */
export type VmPowerOperation = 'poweron' | 'poweroff' | 'suspend' | 'shutdown' | 'reset' | 'reboot';

/**
    * Interface for VNIC properties.
    */
export interface VnicJson {
        adapter_type: string;
        address_mode: VnicAddressMode;
        connected: boolean;
        deleted: boolean;
        ip_addr: string;
        mac_addr: string;
        net_name: string;
        primary_cnx: boolean;
        vnic_id: number;
}
/**
    * Enumeration of possible VNIC addressing modes.
    */
export type VnicAddressMode = 'DHCP' | 'MANUAL' | 'POOL' | 'NONE';

/**
    * API User JSON Representation.
    */
export interface UserJson {
        name: string;
        address: string;
        city: string;
        company: string;
        country: string;
        created_date: number;
        deleted: boolean;
        deleted_date: number | null;
        email: string;
        fullname: string;
        locked: boolean;
        phone: string;
        state: string;
        user_type: UserType;
        zip: string;
        domain: string;
}
/**
    * Enumeration of possible user types.
    */
export type UserType = 'SYSTEM_ADMIN' | 'READ_ONLY_SYSTEM_ADMIN' | 'CUSTOMER';

/**
  * Enumerates the core entity types.
  */
export type EntityType = 'COMPANY' | 'ORG' | 'VDC' | 'VAPP' | 'VM' | 'CATALOG' | 'VPG' | 'ORG_VDC_NETWORK' | 'EDGE' | 'VAPP_NETWORK' | 'VAPP_TEMPLATE' | 'MEDIA' | 'EXTERNAL_NETWORK' | 'VCC_TENANT' | 'COMPANY';

/**
    * Interface for virtual disk properties JSON representation.
    */
export interface VirtualDiskJson {
        name: string;
        size: number;
        type: VirtualDiskType;
}
/**
    * Enumeration of possible Virtual Disk types.
    */
export type VirtualDiskType = 'LSI_LOGIC' | 'LSI_LOGIC_SAS' | 'PARA_VIRTUAL' | 'BUS_LOGIC' | 'SATA' | 'IDE';

/**
    * API Org Entity Tree JSON representation.
    */
export interface OrgEntityTreeJson {
        location_id: string;
        org_uuid: string;
        tree: EntityTreeNodeJson;
        updated_date: number;
        crm: string;
}
/**
    * API Entity Tree Node JSON representation.
    */
export interface EntityTreeNodeJson {
        type: EntityType;
        uuid: string;
        name: string;
        update_date: number;
        children: {
                [entityType: string]: Array<EntityTreeNodeJson>;
        };
}

/**
  * Backup restore point JSON representation.
  */
export interface BackupRestorePointJson {
    name: string;
    timestamp: number;
    backup_server_name: string;
}

/**
    * Interface for BillJson JSON representation.
    */
export interface BillJson {
        total: number;
        cpu: number;
        bandwidth: number;
        mem: number;
        estimate: number;
        cpu_usage: number;
        cpu_burst_usage: number;
        cpu_res_usage: number;
        mem_usage: number;
        mem_res_usage: number;
        mem_burst_usage: number;
        bandwidth_usage: number;
        cpu_burst: number;
        mem_burst: number;
        bandwidth_burst: number;
        currency_code: CurrencyCode;
        time: number;
        test_drive: boolean;
        line_items: Array<BillLineItemJson>;
        discount: number;
        disk_usage: number;
        disk: number;
        disk_burst_usage: number;
        disk_burst: number;
        hdd_usage: number;
        hdd_cost: number;
        hdd_burst_usage: number;
        hdd_burst_cost: number;
        hdd_reserved_cost: number;
        hdd_reserved_usage: number;
        ssd_usage: number;
        ssd_cost: number;
        ssd_burst_usage: number;
        ssd_burst_cost: number;
        ssd_reserved_cost: number;
        ssd_reserved_usage: number;
        archive_usage: number;
        archive_cost: number;
        archive_burst_usage: number;
        archive_burst_cost: number;
        archive_reserved_cost: number;
        archive_reserved_usage: number;
        zerto_archive_usage: number;
        zerto_archive_cost: number;
        zerto_advanced_usage: number;
        zerto_advanced_cost: number;
        entity_uuid: string;
        entity_type: EntityType;
        entity_name: string;
        bandwidth_reserved_usage: number;
        bandwidth_reserved_cost: number;
        bandwidth_burst_usage: number;
}
/**
    * Interface for BillJson Line Item JSON representation.
    */
export interface BillLineItemJson {
        name: string;
        price: number;
        quantity: number;
        product_id: string;
}
/**
    * Enumeration of supported currency codes.
    */
export type CurrencyCode = 'USD' | 'EUR' | 'GBP' | 'SGD';

/**
  * Interface for Billing Summary JSON representation.
  */
export interface BillingSummaryJson {
    previous_month: BillJson;
    current_month: BillJson;
    previous_hour: BillJson;
    current_hour: BillJson;
    test_drive: boolean;
}

/**
    * Interface for Edge Gateway JSON properties.
    */
export interface EdgeJson extends EntityJson {
        status: number;
        vdc_uuid: string;
        org_uuid: string;
        interfaces: Array<EdgeInterfaceJson>;
        backward_compatibility_mode: boolean;
        gateway_backing_config: EdgeBackingConfigurationType;
        high_availability_enabled: boolean;
        default_dns_relay_route: boolean;
        location_id: string;
        description: string;
        vcloud_href: string | null;
}
/**
    * Interface for Edge Interface JSON representation.
    */
export interface EdgeInterfaceJson {
        display_name: string;
        name: string;
        in_rate_limit: number;
        out_rate_limit: number;
        type: EdgeInterfaceType;
        apply_rate_limit: boolean;
        default_route: boolean;
        network: string;
        network_uuid: string;
        subnet_participation: Array<EdgeSubnetParticipationJson>;
}
/**
    * Interface for Edge SubnetParticipation JSON representation.
    */
export interface EdgeSubnetParticipationJson {
        gateway: string;
        netmask: string;
        ip_address: string;
        ip_ranges: Array<IpRangeJson>;
}
/**
    * Enumeration of possible edge interface types.
    */
export type EdgeInterfaceType = 'internal' | 'uplink';
/**
    * Enumeration of possible edge backing configuration types.
    */
export type EdgeBackingConfigurationType = 'compact' | 'full';

/**
  * Interface for Internal Network JSON properties.
  */
export interface InternalNetworkJson extends AbstractNetworkJson {
    edge_uuid: string | null;
    shared: boolean;
}

/**
  * Interface for IP Range JSON properties.
  */
export interface IpRangeJson {
    start: string;
    end: string;
}

/**
    * JSON representation of metadata from the API.
    */
export interface MetadataJson<T extends MetadataType> {
        key: string;
        access: MetadataAccessMode;
        type: MetadataTypeKey;
        value: T;
}
/**
    * Enumeration of possible metadata type keys.
    */
export type MetadataTypeKey = 'string' | 'number' | 'datetime' | 'boolean';
/**
    * Enumeration of possible metadata types.
    */
export type MetadataType = string | number | boolean | Date;
/**
    * Enumeration of possible metadata access modes.
    */
export type MetadataAccessMode = 'READ_WRITE' | 'READONLY' | 'PRIVATE';

/**
  * Interface for mks screen ticket JSON representation.
  */
export interface MksScreenTicketJson {
    vmx: string;
    ticket: string;
    host: string;
    port: string;
}

/**
  * Interface for Org JSON properties.
  */
export interface OrgJson extends EntityJson {
    location_id: string;
    enabled: boolean;
    vapp_max_runtime_lease: number;
    vapp_max_storage_lease: number;
    vapp_template_max_storage_lease: number;
    vapp_delete_on_storage_expire: boolean;
    vapp_template_delete_on_storage_expire: boolean;
    zerto_target: boolean;
    fullname: string;
    description: string;
    vcloud_href: string;
    crm: string;
}

/**
  * Interface for screen ticket JSON representation.
  */
export interface ScreenTicketJson {
    vm_id: string;
    ticket: string;
    host: string;
    ssl_thumbprint: string;
}

/**
  * Interface for snapshot JSON representation.
  */
export interface SnapshotJson {
    creation_date: number;
    size: number;
    is_powered_on: boolean;
}

/**
    * Interface for vApp properties.
    */
export interface VappJson extends EntityJson {
        deployed: boolean;
        status: VappStatus;
        storage_profiles: Array<string>;
        runtime_lease: number;
        storage_lease: number;
        runtime_expire: number | null;
        storage_expire: number | null;
        vdc_uuid: string;
        org_uuid: string;
        location_id: string;
        description: string;
        vcloud_href: string;
        created_date: number;
        is_expired: boolean;
}
/**
    * Enumeration of possible vApp statuses from the API.
    */
export type VappStatus = 'POWERED_ON' | 'POWERED_OFF' | 'FAILED_CREATION' | 'INCONSISTENT_STATE' | 'RESOLVED' | 'SUSPENDED' | 'UNKNOWN' | 'UNRECOGNIZED' | 'UNRESOLVED' | 'WAITING_FOR_INPUT' | 'MIXED';

/**
    * Interface for vDC JSON properties.
    */
export interface VdcJson extends EntityJson {
        enabled: boolean;
        vcenter_moref: string;
        vcenter_name: string;
        description: string;
        vcloud_href: string;
        vcenter_instance_uuid: string;
        vcenter_href: string;
        allocation_model: VdcAllocationModel;
        reserved_cpu: number;
        reserved_mem: number;
        disk_limit: number;
        alloc_cpu: number;
        alloc_mem: number;
        max_hdw_version: string;
        network_quota: number;
        used_network_count: number;
        location_id: string;
        org_uuid: string;
}
/**
    * Enumerates the possible vDC allocation model options.
    */
export type VdcAllocationModel = 'paygo' | 'allocation_pool' | 'reservation_pool';

/**
    * Interface for abstract Network JSON properties.
    */
export interface AbstractNetworkJson extends EntityJson {
        location_id: string;
        org_uuid: string;
        vdc_uuid: string;
        description: string;
        primary_dns: string;
        secondary_dns: string;
        dns_suffix: string;
        fence_mode: NetworkFenceMode;
        gateway: string;
        netmask: string;
        ip_ranges: Array<IpRangeJson>;
        inherited: boolean;
        parent_network_uuid: string | null;
}
/**
    * Enumeration of possible Network fence mode options.
    */
export type NetworkFenceMode = 'NATROUTED' | 'BRIDGED' | 'ISOLATED';

/**
  * Interface for vApp Network JSON properties.
  */
export interface VappNetworkJson extends AbstractNetworkJson {
    vapp_uuid: string;
    router_external_ip: string;
}

/**
  * Interface for Company JSON properties.
  */
export interface CompanyJson extends EntityJson {
    has_iaas: boolean;
    has_vcc: boolean;
}

/**
  * Enumeration of iland Permission keys.
  */
export type PermissionType = 'VIEW_ILAND_BACKUP_TENANT' | 'MANAGE_ILAND_BACKUP_TENANT_STORAGE' | 'VIEW_ILAND_BACKUP_LOCATION' | 'VIEW_ILAND_BACKUP_LOCATION_BILLING' | 'MANAGE_ILAND_BACKUP_DATA_CENTER_STORAGE' | 'VIEW_ILAND_CLOUD_VM' | 'VIEW_ILAND_CLOUD_VM_BILLING' | 'ACCESS_ILAND_CLOUD_VM_CONSOLE' | 'MANAGE_ILAND_CLOUD_VM_POWER_STATE' | 'MANAGE_ILAND_CLOUD_VM_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_VM_SNAPSHOTS' | 'COPY_MOVE_RESTORE_ILAND_CLOUD_VM' | 'DELETE_ILAND_CLOUD_VM' | 'VIEW_ILAND_CLOUD_VAPP_NETWORK' | 'MANAGE_ILAND_CLOUD_VAPP_NETWORK_CONFIGURATION' | 'DELETE_ILAND_CLOUD_VAPP_NETWORK' | 'VIEW_ILAND_CLOUD_VAPP' | 'VIEW_ILAND_CLOUD_VAPP_BILLING' | 'MANAGE_ILAND_CLOUD_VAPP_POWER_STATE' | 'MANAGE_ILAND_CLOUD_VAPP_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_VAPP_SNAPSHOTS' | 'MANAGE_ILAND_CLOUD_VAPP_LEASES' | 'COPY_MOVE_DOWNLOAD_ILAND_CLOUD_VAPP' | 'DELETE_ILAND_CLOUD_VAPP' | 'CREATE_ILAND_CLOUD_VAPP_VMS' | 'CREATE_ILAND_CLOUD_VAPP_NETWORKS' | 'VIEW_ILAND_CLOUD_INTERNAL_NETWORK' | 'MANAGE_ILAND_CLOUD_INTERNAL_NETWORK_CONFIGURATION' | 'DELETE_ILAND_CLOUD_INTERNAL_NETWORK' | 'VIEW_ILAND_CLOUD_EDGE' | 'MANAGE_ILAND_CLOUD_EDGE_DHCP_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_LOAD_BALANCER_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_STATIC_ROUTING_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_RATE_LIMIT_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_IPSEC_VPN_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_SSL_VPN_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_FIREWALL_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_EDGE_NAT_CONFIGURATION' | 'VIEW_ILAND_CLOUD_VDC' | 'VIEW_ILAND_CLOUD_VDC_BILLING' | 'MANAGE_ILAND_CLOUD_VDC_CONFIGURATION' | 'CREATE_ILAND_CLOUD_VDC_VAPPS' | 'CREATE_ILAND_CLOUD_VDC_CATALOG_ITEMS' | 'CREATE_ILAND_CLOUD_VDC_INTERNAL_NETWORKS' | 'VIEW_ILAND_CLOUD_VAPP_TEMPLATE' | 'MANAGE_ILAND_CLOUD_VAPP_TEMPLATE_CONFIGURATION' | 'DOWNLOAD_ILAND_CLOUD_VAPP_TEMPLATE' | 'DELETE_ILAND_CLOUD_VAPP_TEMPLATE' | 'VIEW_ILAND_CLOUD_MEDIA' | 'MANAGE_ILAND_CLOUD_MEDIA_CONFIGURATION' | 'CLONE_DOWNLOAD_ILAND_CLOUD_MEDIA' | 'DELETE_ILAND_CLOUD_MEDIA' | 'VIEW_ILAND_CLOUD_CATALOG' | 'MANAGE_ILAND_CLOUD_CATALOG_CONFIGURATION' | 'DELETE_ILAND_CLOUD_CATALOG' | 'CREATE_ILAND_CLOUD_CATALOG_VAPP_TEMPLATES' | 'CREATE_ILAND_CLOUD_CATALOG_MEDIA' | 'VIEW_ILAND_CLOUD_VPG' | 'MANAGE_ILAND_CLOUD_VPG_CONFIGURATION' | 'INITIATE_ILAND_CLOUD_VPG_TEST_FAILOVER' | 'INITIATE_ILAND_CLOUD_VPG_LIVE_FAILOVER' | 'VIEW_ILAND_CLOUD_ORG' | 'VIEW_ILAND_CLOUD_ORG_SECURITY' | 'VIEW_ILAND_CLOUD_ORG_BILLING' | 'MANAGE_ILAND_CLOUD_ORG_CONFIGURATION' | 'MANAGE_ILAND_CLOUD_ORG_DNS' | 'CREATE_ILAND_CLOUD_ORG_CATALOGS' | 'MANAGE_ILAND_CLOUD_ORG_SECURITY' | 'VIEW_ILAND_CLOUD_LOCATION' | 'VIEW_ILAND_CLOUD_LOCATION_BILLING' | 'VIEW_ILAND_BACKUP' | 'VIEW_ILAND_BACKUP_BILLING' | 'VIEW_ILAND_CLOUD' | 'VIEW_ILAND_CLOUD_BILLING' | 'VIEW_COMPANY' | 'VIEW_COMPANY_SUPPORT_TICKETS' | 'VIEW_COMPANY_IAM' | 'MANAGE_COMPANY_IAM' | 'MANAGE_COMPANY_SUPPORT_TICKETS';

/**
  * Interface for Policy JSON properties.
  */
export interface PolicyJson {
    entity_uuid: string;
    domain: EntityDomainType;
    type: PolicyType;
    permissions: Array<PermissionType>;
}
export type PolicyType = 'ADMIN' | 'READ_ONLY' | 'CUSTOM';

/**
  * Interface for Role JSON properties.
  */
export interface RoleJson {
    uuid: string;
    company_id: string;
    name: string;
    description: string;
    policies: Array<PolicyJson>;
    type: RoleType;
}
export type RoleType = 'CUSTOM' | 'BUILT_IN';

/**
  * Role Creation Request JSON properties.
  */
export interface RoleCreationRequestJson {
    company_id: string;
    name: string;
    description: string;
    policies: Array<PolicyJson>;
}

/**
  * User Creation Request JSON properties.
  */
export interface UserCreationRequestJson {
    password: string;
    domain: string;
    email: string;
    fullname: string;
    name: string;
}

/**
    * User Inventory JSON interface.
    */
export interface UserInventoryJson {
        username: string;
        inventory: Array<UserCompanyInventoryJson>;
}
/**
    * User Company Inventory JSON interface.
    */
export interface UserCompanyInventoryJson {
        company_id: string;
        company_name: string;
        entities: {
                [entityDomain: string]: Array<UserInventoryEntityJson>;
        };
}
/**
    * User Inventory Entity JSON interface.
    */
export interface UserInventoryEntityJson {
        uuid: string;
        type: EntityDomainType;
        name: string;
        parent_uuid: string | null;
        parent_type: EntityDomainType | null;
}

/**
  * Interface for Catalog JSON representation.
  */
export interface CatalogJson extends EntityJson {
    location_id: string;
    shared: boolean;
    public: boolean;
    version: number;
    org_uuid: string;
    description: string;
    vcloud_href: string;
    created_date: number;
}

/**
  * Interface for VappTemplate JSON representation.
  */
export interface VappTemplateJson extends EntityJson {
    description: string;
    vcloud_href: string;
    status: number;
    size: number;
    customizable: boolean;
    customization_required: boolean;
    gold_master: boolean;
    storage_profile_uuid: string;
    public: boolean;
    vdc_uuid: string;
    location_id: string;
    org_uuid: string;
    catalog_uuid: string;
    created_date: number;
    is_expired: boolean;
}

/**
  * Interface for Media JSON representation.
  */
export interface MediaJson extends EntityJson {
    status: number;
    size: number;
    public: boolean;
    location_id: string;
    org_uuid: string;
    catalog_uuid: string;
    storage_profile_uuid: string;
    vdc_uuid: string;
    description: string;
    vcloud_href: string;
    created_date: number;
}

export type AccessType = 'WRITE' | 'READ';

export type EntityDomainType = 'COMPANY' | 'ILAND_CLOUD_PRODUCT' | 'ILAND_BACKUP_PRODUCT' | 'ILAND_CLOUD_LOCATION' | 'ILAND_CLOUD_ORGANIZATION' | 'ILAND_CLOUD_VPG' | 'ILAND_CLOUD_CATALOG' | 'ILAND_CLOUD_MEDIA' | 'ILAND_CLOUD_VAPP_TEMPLATE' | 'ILAND_CLOUD_VDC' | 'ILAND_CLOUD_EDGE' | 'ILAND_CLOUD_INTERNAL_NETWORK' | 'ILAND_CLOUD_VAPP' | 'ILAND_CLOUD_VAPP_NETWORK' | 'ILAND_CLOUD_VM' | 'ILAND_BACKUP_LOCATION' | 'ILAND_BACKUP_TENANT';

